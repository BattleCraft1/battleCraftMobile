Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/account/AccountPanel/AccountPanel.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _expo = require('expo');

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _actions = require('../../../redux/actions');

var _serverName = require('../../../main/consts/serverName');

var _axios = require('axios');

var _axios2 = babelHelpers.interopRequireDefault(_axios);

var _MainStyles = require('../../../Styles/UniversalStyles/MainStyles');

var _MainStyles2 = babelHelpers.interopRequireDefault(_MainStyles);

var _DetailsStyle = require('../../../Styles/AccountStyles/DetailsStyle');

var _DetailsStyle2 = babelHelpers.interopRequireDefault(_DetailsStyle);

var _BaseColours = require('battleCraftMobile/App/main/consts/BaseColours');

var _BaseColours2 = babelHelpers.interopRequireDefault(_BaseColours);

var _InputStyles = require('../../../Styles/UniversalStyles/InputStyles');

var _InputStyles2 = babelHelpers.interopRequireDefault(_InputStyles);

var _ChangePasswordPopup = require('./ChangePasswordPopup/ChangePasswordPopup');

var _ChangePasswordPopup2 = babelHelpers.interopRequireDefault(_ChangePasswordPopup);

var _RegisterPopup = require('./../NoAuthPanel/RegisterPopup/RegisterPopup');

var _RegisterPopup2 = babelHelpers.interopRequireDefault(_RegisterPopup);

var regeneratorRuntime = require('regenerator-runtime');

var db = _expo.SQLite.openDatabase({ name: 'tokens2.db' });

var AccountPanel = function (_Component) {
    babelHelpers.inherits(AccountPanel, _Component);

    function AccountPanel(props) {
        babelHelpers.classCallCheck(this, AccountPanel);

        var _this = babelHelpers.possibleConstructorReturn(this, (AccountPanel.__proto__ || Object.getPrototypeOf(AccountPanel)).call(this, props));

        _this.state = {
            accountData: {
                role: "",
                username: "",
                showChangePasswordPopup: false,
                showCreateAdminPopup: false
            }
        };
        return _this;
    }

    babelHelpers.createClass(AccountPanel, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            return regeneratorRuntime.async(function componentDidMount$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return regeneratorRuntime.awrap(this.getAccountDetails());

                        case 2:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            return regeneratorRuntime.async(function componentWillReceiveProps$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!(nextProps.entityPanel.mode === 'disabled' && this.props.entityPanel.mode !== 'disabled')) {
                                _context2.next = 3;
                                break;
                            }

                            _context2.next = 3;
                            return regeneratorRuntime.awrap(this.getAccountDetails());

                        case 3:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'getAccountDetails',
        value: function getAccountDetails() {
            var _this2 = this;

            var getAccountDetailsOperation;
            return regeneratorRuntime.async(function getAccountDetails$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            getAccountDetailsOperation = function getAccountDetailsOperation() {
                                return regeneratorRuntime.async(function getAccountDetailsOperation$(_context5) {
                                    while (1) {
                                        switch (_context5.prev = _context5.next) {
                                            case 0:
                                                _this2.props.startLoading("Fetching account data...");
                                                _context5.next = 3;
                                                return regeneratorRuntime.awrap(_axios2.default.get(_serverName.serverName + 'auth/account', {
                                                    headers: {
                                                        "X-Auth-Token": _this2.props.security.token
                                                    }
                                                }).then(function _callee(res) {
                                                    return regeneratorRuntime.async(function _callee$(_context3) {
                                                        while (1) {
                                                            switch (_context3.prev = _context3.next) {
                                                                case 0:
                                                                    console.log("aaaa");
                                                                    _this2.props.stopLoading();
                                                                    _this2.setState({ accountData: res.data });

                                                                case 3:
                                                                case 'end':
                                                                    return _context3.stop();
                                                            }
                                                        }
                                                    }, null, _this2);
                                                }).catch(function _callee2(error) {
                                                    return regeneratorRuntime.async(function _callee2$(_context4) {
                                                        while (1) {
                                                            switch (_context4.prev = _context4.next) {
                                                                case 0:
                                                                    _this2.props.stopLoading();
                                                                    _this2.props.showNetworkErrorMessage(error, getAccountDetailsOperation);

                                                                case 2:
                                                                case 'end':
                                                                    return _context4.stop();
                                                            }
                                                        }
                                                    }, null, _this2);
                                                }));

                                            case 3:
                                            case 'end':
                                                return _context5.stop();
                                        }
                                    }
                                }, null, _this2);
                            };

                            _context6.next = 3;
                            return regeneratorRuntime.awrap(getAccountDetailsOperation());

                        case 3:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'editProfile',
        value: function editProfile() {
            this.props.editEntity("user", this.state.accountData.username);
        }
    }, {
        key: 'changePassword',
        value: function changePassword() {
            this.setState({ showChangePasswordPopup: true });
        }
    }, {
        key: 'logout',
        value: function logout() {
            db.transaction(function (tx) {
                tx.executeSql('delete from tokens2 where id = 1', [], function (ts, success) {
                    console.log("success: ");
                    console.log(success);
                }, function (ts, error) {
                    console.log("error: ");
                    console.log(error);
                });
            });
            this.props.setTokenAndRole("", "");
        }
    }, {
        key: 'createRoleButtons',
        value: function createRoleButtons() {
            var _this3 = this;

            var buttons = [];

            if (this.state.accountData.role === 'ROLE_ADMIN') {
                buttons.push(_react2.default.createElement(
                    _reactNative.View,
                    { style: [_DetailsStyle2.default.buttonWrapper], key: 'createAdminAccount', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 115
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableHighlight,
                        { style: [_DetailsStyle2.default.button, _MainStyles2.default.borderStyle], onPress: function onPress() {
                                _this3.setState({ showCreateAdminPopup: true });
                            }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 116
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 117
                                }
                            },
                            'Create administrator'
                        )
                    )
                ));
            }

            if (this.state.accountData.role === 'ROLE_ORGANIZER' || this.state.accountData.role === 'ROLE_PLAYER') {
                buttons.push(_react2.default.createElement(
                    _reactNative.View,
                    { style: [_DetailsStyle2.default.buttonWrapper], key: 'playedTournaments', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 125
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableHighlight,
                        { style: [_DetailsStyle2.default.button, _MainStyles2.default.borderStyle], onPress: function onPress() {
                                _this3.props.navigate('Played');
                            }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 126
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 127
                                }
                            },
                            'Played tournaments'
                        )
                    )
                ));
            }
            if (this.state.accountData.role === 'ROLE_ORGANIZER') {
                buttons.push(_react2.default.createElement(
                    _reactNative.View,
                    { style: [_DetailsStyle2.default.buttonWrapper], key: 'organizedTournaments', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 134
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableHighlight,
                        { style: [_DetailsStyle2.default.button, _MainStyles2.default.borderStyle], onPress: function onPress() {
                                _this3.props.navigate('Organized');
                            }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 135
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 136
                                }
                            },
                            'Organized tournaments'
                        )
                    )
                ));
            }

            return buttons;
        }
    }, {
        key: 'createRole',
        value: function createRole(role) {
            var roleName = role.replace("ROLE_", "");
            roleName = roleName.toUpperCase();
            if (roleName === 'ACCEPTED') {
                return 'PLAYER';
            }
            return roleName;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            return _react2.default.createElement(
                _reactNative.ScrollView,
                { style: { flex: 1 }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 156
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_DetailsStyle2.default.header, _MainStyles2.default.borderStyle], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 157
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { numberOfLines: 1, style: [_MainStyles2.default.textStyle, { fontSize: 28 }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 158
                            }
                        },
                        this.state.accountData.username
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: _DetailsStyle2.default.avatarContainer, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 160
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: _DetailsStyle2.default.innerContainer, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 161
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, { style: _DetailsStyle2.default.avatar,
                            source: { uri: _serverName.serverName + '/get/user/avatar?username=' + this.state.accountData.username + '&' + new Date().getTime() }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 162
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: _InputStyles2.default.inputText, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 165
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: _MainStyles2.default.smallWhiteStyle, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 166
                                }
                            },
                            this.createRole(this.state.accountData.role)
                        )
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_DetailsStyle2.default.buttonsCard, { width: this.props.dimension.width * 0.8 }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 169
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_DetailsStyle2.default.buttonWrapper], key: 'editProfile', __source: {
                                fileName: _jsxFileName,
                                lineNumber: 170
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableHighlight,
                            { style: [_DetailsStyle2.default.button, _MainStyles2.default.borderStyle], onPress: function onPress() {
                                    _this4.editProfile();
                                }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 171
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 172
                                    }
                                },
                                'Edit profile'
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_DetailsStyle2.default.buttonWrapper], key: 'changePassword', __source: {
                                fileName: _jsxFileName,
                                lineNumber: 175
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableHighlight,
                            { style: [_DetailsStyle2.default.button, _MainStyles2.default.borderStyle], onPress: function onPress() {
                                    _this4.changePassword();
                                }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 176
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 177
                                    }
                                },
                                'Change password'
                            )
                        )
                    ),
                    this.createRoleButtons(),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_DetailsStyle2.default.buttonWrapper], key: 'logout', __source: {
                                fileName: _jsxFileName,
                                lineNumber: 181
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableHighlight,
                            { style: [_DetailsStyle2.default.button, _MainStyles2.default.borderStyle], onPress: function onPress() {
                                    _this4.logout();
                                }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 182
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 183
                                    }
                                },
                                'Log out'
                            )
                        )
                    )
                ),
                this.state.showChangePasswordPopup && _react2.default.createElement(_ChangePasswordPopup2.default, { disable: function disable() {
                        return _this4.setState({ showChangePasswordPopup: false });
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 187
                    }
                }),
                this.state.showCreateAdminPopup && _react2.default.createElement(_RegisterPopup2.default, { userKind: "admin", disable: function disable() {
                        return _this4.setState({ showCreateAdminPopup: false });
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 188
                    }
                })
            );
        }
    }]);
    return AccountPanel;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_actions.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        dimension: state.dimension,
        security: state.security,
        entityPanel: state.entityPanel
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(AccountPanel);