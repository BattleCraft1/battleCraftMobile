'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SwitchComponent = undefined;
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/node_modules/react-native-form-generator/src/lib/SwitchComponent.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _Field = require('./Field');

var _require = require('react-native'),
    View = _require.View,
    StyleSheet = _require.StyleSheet,
    Text = _require.Text,
    Switch = _require.Switch;

var SwitchComponent = exports.SwitchComponent = function (_React$Component) {
  babelHelpers.inherits(SwitchComponent, _React$Component);

  function SwitchComponent(props) {
    babelHelpers.classCallCheck(this, SwitchComponent);

    var _this = babelHelpers.possibleConstructorReturn(this, (SwitchComponent.__proto__ || Object.getPrototypeOf(SwitchComponent)).call(this, props));

    _this.state = {
      value: props.value
    };
    return _this;
  }

  babelHelpers.createClass(SwitchComponent, [{
    key: 'handleLayoutChange',
    value: function handleLayoutChange(e) {
      var _e$nativeEvent$layout = babelHelpers.extends({}, e.nativeEvent.layout),
          x = _e$nativeEvent$layout.x,
          y = _e$nativeEvent$layout.y,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;

      this.setState(e.nativeEvent.layout);
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      this.setState({ value: value });
      if (this.props.onChange) this.props.onChange(value);
      if (this.props.onValueChange) this.props.onValueChange(value);
    }
  }, {
    key: 'handleValueChange',
    value: function handleValueChange(value) {
      this.setState({ value: value });
      if (this.props.onChange) this.props.onChange(value);
      if (this.props.onValueChange) this.props.onValueChange(value);
    }
  }, {
    key: 'render',
    value: function render() {

      return _react2.default.createElement(
        _Field.Field,
        babelHelpers.extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 37
          }
        }),
        _react2.default.createElement(
          View,
          { style: this.props.containerStyle,
            onLayout: this.handleLayoutChange.bind(this), __source: {
              fileName: _jsxFileName,
              lineNumber: 38
            }
          },
          _react2.default.createElement(
            Text,
            { style: this.props.labelStyle, __source: {
                fileName: _jsxFileName,
                lineNumber: 41
              }
            },
            this.props.label
          ),
          _react2.default.createElement(Switch, {
            onValueChange: this.handleValueChange.bind(this),
            style: this.props.switchStyle,
            value: this.state.value, __source: {
              fileName: _jsxFileName,
              lineNumber: 42
            }
          })
        )
      );
    }
  }]);
  return SwitchComponent;
}(_react2.default.Component);

SwitchComponent.propTypes = {
  labelStyle: Text.propTypes.style,
  containerStyle: View.propTypes.style,
  switchStyle: Switch.propTypes.style
};

var formStyles = StyleSheet.create({
  form: {},
  alignRight: {
    marginTop: 7, position: 'absolute', right: 10
  },
  noBorder: {
    borderTopWidth: 0,
    borderBottomWidth: 0
  },
  separatorContainer: {
    paddingTop: 35,
    borderBottomColor: '#C8C7CC',
    borderBottomWidth: 1

  },
  separator: {

    paddingLeft: 10,
    paddingRight: 10,
    color: '#6D6D72',
    paddingBottom: 7

  },
  fieldsWrapper: {},
  horizontalContainer: {
    flexDirection: 'row',

    justifyContent: 'flex-start'
  },
  fieldContainer: {
    borderBottomWidth: 1,
    borderBottomColor: '#C8C7CC',
    backgroundColor: 'white',
    justifyContent: 'center',
    height: 45
  },
  fieldText: {
    fontSize: 34 / 2,
    paddingLeft: 10,
    paddingRight: 10,
    justifyContent: 'center',
    lineHeight: 32
  },
  input: {
    paddingLeft: 10,
    paddingRight: 10

  },
  helpTextContainer: {
    marginTop: 9,
    marginBottom: 25,
    paddingLeft: 20,
    paddingRight: 20

  },
  helpText: {
    color: '#7a7a7a'
  }
});