Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = babelHelpers.interopRequireDefault(_reduxThunk);

var _index = require('./App/redux/reducers/index');

var _index2 = babelHelpers.interopRequireDefault(_index);

var _entityPanelModes = require('./App/main/consts/entityPanelModes');

var _entityPanelTypes = require('./App/main/consts/entityPanelTypes');

var _AppContent = require('./App/main/AppContent');

var _AppContent2 = babelHelpers.interopRequireDefault(_AppContent);

function configureStore(initialState) {
    var enhancer = (0, _redux.compose)((0, _redux.applyMiddleware)(_reduxThunk2.default));
    return (0, _redux.createStore)(_index2.default, initialState, enhancer);
}

var store = configureStore({
    loading: {
        dataFetched: false,
        message: ""
    },
    dimension: {
        height: _reactNative.Dimensions.get('screen').height,
        width: _reactNative.Dimensions.get('screen').width,
        orientation: _reactNative.Dimensions.get('screen').height >= _reactNative.Dimensions.get('screen').width ? 'portrait' : 'landscape'
    },
    possibleOperations: [],
    entityPanel: {
        mode: _entityPanelModes.entityPanelModes.disabled,
        entityType: _entityPanelTypes.entityPanelTypes.none,
        entityName: "",
        hidden: true,
        relatedEntity: {
            relatedEntityNames: [],
            relatedEntityType: "",
            relatedEntityCriteria: []
        }
    },
    additionalEntityPanel: {
        additionalEntityType: _entityPanelTypes.entityPanelTypes.none,
        additionalEntityName: ""
    },
    confirmation: {
        header: "",
        message: "",
        onConfirmFunction: function onConfirmFunction() {},
        isShown: false
    },
    message: {
        isShown: false,
        messageText: "",
        messageType: "",
        failedOperation: function failedOperation() {}
    },
    page: {
        content: [],
        checkedElementsNames: []
    },
    pageRequest: { pageRequest: {
            size: 10,
            page: 0,
            direction: "ASC",
            property: "name"
        },
        searchCriteria: []
    },
    security: {
        token: "",
        role: ""
    },
    reportPanel: {
        isShown: false,
        objectType: "",
        objectNames: []
    },
    sound: {
        name: ""
    }
});

var App = function (_React$Component) {
    babelHelpers.inherits(App, _React$Component);

    function App(props) {
        babelHelpers.classCallCheck(this, App);
        return babelHelpers.possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
    }

    babelHelpers.createClass(App, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _reactRedux.Provider,
                { store: store, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 96
                    }
                },
                _react2.default.createElement(_AppContent2.default, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 97
                    }
                })
            );
        }
    }]);
    return App;
}(_react2.default.Component);

exports.default = App;