Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/entityPanel/game/Panel.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNativeModal = require('react-native-modal');

var _reactNativeModal2 = babelHelpers.interopRequireDefault(_reactNativeModal);

var _MainStyles = require('../../../Styles/UniversalStyles/MainStyles');

var _MainStyles2 = babelHelpers.interopRequireDefault(_MainStyles);

var _EntityPanelStyle = require('../../../Styles/CollectionPanelStyles/EntityPanelStyle');

var _EntityPanelStyle2 = babelHelpers.interopRequireDefault(_EntityPanelStyle);

var _BaseColours = require('battleCraftMobile/App/main/consts/BaseColours');

var _BaseColours2 = babelHelpers.interopRequireDefault(_BaseColours);

var _GameDataTab = require('./tabs/GameDataTab');

var _GameDataTab2 = babelHelpers.interopRequireDefault(_GameDataTab);

var _index = require('../../../redux/actions/index');

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _serverName = require('../../../main/consts/serverName');

var _axios = require('axios');

var _axios2 = babelHelpers.interopRequireDefault(_axios);

var _checkIfObjectIsNotEmpty = require('../../../main/functions/checkIfObjectIsNotEmpty');

var _checkIfObjectIsNotEmpty2 = babelHelpers.interopRequireDefault(_checkIfObjectIsNotEmpty);

var _GameValidator = require('../validators/GameValidator');

var _GameValidator2 = babelHelpers.interopRequireDefault(_GameValidator);

var regeneratorRuntime = require('regenerator-runtime');

var Panel = function (_Component) {
    babelHelpers.inherits(Panel, _Component);

    function Panel(props) {
        babelHelpers.classCallCheck(this, Panel);

        var _this = babelHelpers.possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));

        _this.state = {
            entityReady: false,
            entity: {
                "name": "",
                "nameChange": "",
                "creatorName": "",
                "dateOfCreation": new Date(),
                "tournamentsNumber": 0,
                "status": "NEW",
                "gameRules": "",
                "canCurrentUserEdit": false
            },
            validationErrors: {
                "name": "",
                "nameChange": "",
                "gameRules": ""
            }
        };
        return _this;
    }

    babelHelpers.createClass(Panel, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var getEntityOperation, entity;
            return regeneratorRuntime.async(function componentDidMount$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!(this.props.mode === 'edit' || this.props.mode === 'get')) {
                                _context2.next = 6;
                                break;
                            }

                            getEntityOperation = function getEntityOperation() {
                                return regeneratorRuntime.async(function getEntityOperation$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _this2.props.startLoading("Fetching game...");
                                                _context.next = 3;
                                                return regeneratorRuntime.awrap(_axios2.default.get(_serverName.serverName + 'get/game?name=' + _this2.props.name, {
                                                    headers: {
                                                        "X-Auth-Token": _this2.props.security.token
                                                    }
                                                }).then(function (res) {
                                                    _this2.setState({ entity: res.data });
                                                    _this2.setState({ entityReady: true });
                                                    _this2.props.stopLoading();
                                                    console.log("input entity: ");
                                                    console.log(res.data);
                                                }).catch(function (error) {
                                                    _this2.props.showNetworkErrorMessage(error, getEntityOperation);
                                                    _this2.props.stopLoading();
                                                }));

                                            case 3:
                                            case 'end':
                                                return _context.stop();
                                        }
                                    }
                                }, null, _this2);
                            };

                            _context2.next = 4;
                            return regeneratorRuntime.awrap(getEntityOperation());

                        case 4:
                            _context2.next = 10;
                            break;

                        case 6:
                            entity = this.state.entity;

                            entity.canCurrentUserEdit = true;
                            this.setState({ entity: entity });
                            this.setState({ entityReady: true });

                        case 10:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'createContent',
        value: function createContent() {
            if (this.state.entityReady) return _react2.default.createElement(_GameDataTab2.default, {
                width: this.props.dimension.width,
                height: this.props.dimension.height,
                entity: this.state.entity,
                inputsDisabled: this.props.mode === 'get' || !this.state.entity.canCurrentUserEdit,
                changeEntity: this.changeEntity.bind(this),
                validationErrors: this.state.validationErrors
            }, null);else return _react2.default.createElement(_reactNative.View, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 100
                }
            });
        }
    }, {
        key: 'changeEntity',
        value: function changeEntity(fieldName, value) {
            var entity = this.state.entity;
            entity[fieldName] = value;
            this.setState({ entity: entity });
        }
    }, {
        key: 'sendEntity',
        value: function sendEntity() {
            var _this3 = this;

            if (this.props.mode === 'add') {
                var entity = this.state.entity;
                entity.name = entity.nameChange;
                this.setState({ entity: entity });
            }

            var entityToSend = JSON.parse(JSON.stringify(this.state.entity));

            delete entityToSend["creatorName"];
            delete entityToSend["dateOfCreation"];
            delete entityToSend["tournamentsNumber"];
            delete entityToSend["status"];
            delete entityToSend["canCurrentUserEdit"];

            var isEditMode = this.props.mode === 'edit';

            var validationErrors = (0, _GameValidator2.default)(entityToSend, isEditMode);
            if ((0, _checkIfObjectIsNotEmpty2.default)(validationErrors)) {
                var gameRules = entityToSend["gameRules"];
                delete entityToSend["gameRules"];
                console.log("output entity:");
                console.log(entityToSend);
                var sendEntityOperation = function sendEntityOperation() {
                    _this3.props.startLoading("Sending data...");
                    _axios2.default.post(_serverName.serverName + _this3.props.mode + '/' + _this3.props.type, entityToSend, {
                        headers: {
                            "X-Auth-Token": _this3.props.security.token
                        }
                    }).then(function (res) {
                        _this3.props.stopLoading();
                        var newEntity = res.data;
                        if (gameRules === undefined && isEditMode) {
                            _this3.props.showSuccessMessage("Game: " + newEntity.name + " successfully " + _this3.props.mode + "ed");
                            _this3.props.disable();
                        } else _this3.sendGameRules(res.data, gameRules);
                    }).catch(function (error) {
                        _this3.props.stopLoading();
                        if (error.response.data.fieldErrors === undefined) {
                            _this3.props.showNetworkErrorMessage(error, sendEntityOperation);
                        } else {
                            _this3.setValidationErrors(error.response.data);
                        }
                    });
                };

                sendEntityOperation();
            } else {
                this.setValidationErrors(validationErrors);
            }
        }
    }, {
        key: 'sendGameRules',
        value: function sendGameRules(entity, gameRules) {
            var _this4 = this;

            var formData = new FormData();
            formData.append('gameRules', { uri: gameRules, name: entity.name + '.pdf', type: 'application/pdf' });

            var url = _serverName.serverName + '/upload/game/rules?gameName=' + entity.name;
            fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
                    "X-Auth-Token": this.props.security.token,
                    'content-type': 'multipart/form-data'
                }
            }).then(function (res) {
                console.log(res);
                if (res.ok) {
                    _this4.props.showSuccessMessage("Game: " + entity.name + " successfully " + _this4.props.mode + "ed");
                    _this4.props.disable();
                } else {
                    _this4.props.showFailureMessage('Upload failed');
                }
            }).catch(function (error) {
                var entity = _this4.state.entity;
                entity.canCurrentUserEdit = true;
                _this4.setState({ entity: entity });
                _this4.props.showNetworkErrorMessage(error);
            });
        }
    }, {
        key: 'setValidationErrors',
        value: function setValidationErrors(validationException) {
            this.props.showFailureMessage(validationException.message);
            var validationErrors = validationException.fieldErrors;
            console.log("validation errors:");
            console.log(validationErrors);
            var validationErrorsState = this.state.validationErrors;
            for (var field in validationErrorsState) {
                if (validationErrors.hasOwnProperty(field)) {
                    validationErrorsState[field] = validationErrors[field];
                } else {
                    validationErrorsState[field] = "";
                }
            }
            this.setState({ validationErrors: validationErrorsState });
        }
    }, {
        key: 'createButtons',
        value: function createButtons() {
            var _this5 = this;

            if (this.props.mode !== 'get' && this.state.entity.canCurrentUserEdit) {
                return [_react2.default.createElement(
                    _reactNative.TouchableHighlight,
                    { key: 'save', style: [_EntityPanelStyle2.default.button, { backgroundColor: _BaseColours2.default.misc.deepRed }], onPress: function onPress() {
                            return _this5.sendEntity();
                        }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 218
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 219
                            }
                        },
                        'Save'
                    )
                ), _react2.default.createElement(
                    _reactNative.TouchableHighlight,
                    { key: 'close', style: [_EntityPanelStyle2.default.button, { backgroundColor: _BaseColours2.default.misc.deepRed }], onPress: function onPress() {
                            return _this5.props.disable();
                        }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 221
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 222
                            }
                        },
                        'Close'
                    )
                )];
            } else {
                return [_react2.default.createElement(
                    _reactNative.TouchableHighlight,
                    { key: 'ok', style: [_EntityPanelStyle2.default.button, { backgroundColor: _BaseColours2.default.misc.deepRed }], onPress: function onPress() {
                            return _this5.props.disable();
                        }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 228
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 229
                            }
                        },
                        'Ok'
                    )
                )];
            }
        }
    }, {
        key: 'calculateHeight',
        value: function calculateHeight() {
            return this.props.orientation === 'portrait' ? this.props.dimension.height * 0.80 : this.props.dimension.height * 0.77;
        }
    }, {
        key: 'render',
        value: function render() {
            var content = this.createContent();
            var buttons = this.createButtons();

            return _react2.default.createElement(
                _reactNativeModal2.default,
                { isVisible: !this.props.hidden, backdropOpacity: 0.3, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 245
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_EntityPanelStyle2.default.modal, {
                            width: this.props.dimension.width * 0.9,
                            height: this.calculateHeight() }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 246
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_EntityPanelStyle2.default.title, { alignItems: 'center' }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 249
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [_MainStyles2.default.textStyle, { fontSize: 22 }], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 250
                                }
                            },
                            this.props.mode.charAt(0).toUpperCase() + this.props.mode.slice(1) + " game"
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_EntityPanelStyle2.default.formWindow], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 254
                            }
                        },
                        content
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: _EntityPanelStyle2.default.buttonRow, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 257
                            }
                        },
                        buttons
                    )
                )
            );
        }
    }]);
    return Panel;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_index.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        dimension: state.dimension,
        security: state.security
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Panel);