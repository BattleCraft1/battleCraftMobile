Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/collectionPanel/CollectionPanel.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _actions = require('../../redux/actions');

var _serverName = require('../../main/consts/serverName');

var _axios = require('axios');

var _axios2 = babelHelpers.interopRequireDefault(_axios);

var _MainStyles = require('../../Styles/UniversalStyles/MainStyles');

var _MainStyles2 = babelHelpers.interopRequireDefault(_MainStyles);

var _DrawerStyles = require('../../Styles/CollectionPanelStyles/DrawerStyles');

var _DrawerStyles2 = babelHelpers.interopRequireDefault(_DrawerStyles);

var _BaseColours = require('battleCraftMobile/App/main/consts/BaseColours');

var _BaseColours2 = babelHelpers.interopRequireDefault(_BaseColours);

var _reactNativeDrawer = require('react-native-drawer');

var _reactNativeDrawer2 = babelHelpers.interopRequireDefault(_reactNativeDrawer);

var _SearchPanel = require('./searchPanel/SearchPanel');

var _SearchPanel2 = babelHelpers.interopRequireDefault(_SearchPanel);

var _PagePanel = require('./pagePanel/PagePanel');

var _PagePanel2 = babelHelpers.interopRequireDefault(_PagePanel);

var _OptionPanel = require('./optionPanel/OptionPanel');

var _OptionPanel2 = babelHelpers.interopRequireDefault(_OptionPanel);

var _CollectionList = require('./table/CollectionList');

var _CollectionList2 = babelHelpers.interopRequireDefault(_CollectionList);

var _possibleOperationsForCollections = require('../../main/functions/possibleOperationsForCollections');

var _possibleOperationsForCollections2 = babelHelpers.interopRequireDefault(_possibleOperationsForCollections);

var _compareArrays = require('../../main/functions/compareArrays');

var _compareArrays2 = babelHelpers.interopRequireDefault(_compareArrays);

var _OpenOperationsButton = require('./buttons/OpenOperationsButton');

var _OpenOperationsButton2 = babelHelpers.interopRequireDefault(_OpenOperationsButton);

var _InviteButton = require('./buttons/InviteButton');

var _InviteButton2 = babelHelpers.interopRequireDefault(_InviteButton);

var _CancelInviteButton = require('./buttons/CancelInviteButton');

var _CancelInviteButton2 = babelHelpers.interopRequireDefault(_CancelInviteButton);

var regeneratorRuntime = require('regenerator-runtime');

var drawerMap = {
    'page': _PagePanel2.default,
    'search': _SearchPanel2.default
};

var CollectionPanel = function (_Component) {
    babelHelpers.inherits(CollectionPanel, _Component);

    function CollectionPanel(props) {
        babelHelpers.classCallCheck(this, CollectionPanel);

        var _this = babelHelpers.possibleConstructorReturn(this, (CollectionPanel.__proto__ || Object.getPrototypeOf(CollectionPanel)).call(this, props));

        _this.state = {
            collectionType: "tournaments",
            formDrawer: "",
            optionsVisible: false,
            isFiltered: false
        };
        return _this;
    }

    babelHelpers.createClass(CollectionPanel, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            return regeneratorRuntime.async(function componentDidMount$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            this.setState({ isFiltered: false });
                            this.setPossibleOperations(this.props.collectionType);
                            this.createPageRequest(this.props.collectionType);
                            _context.next = 5;
                            return regeneratorRuntime.awrap(this.setState({ collectionType: this.props.collectionType }));

                        case 5:
                            _context.next = 7;
                            return regeneratorRuntime.awrap(this.getPage(this.props.collectionType));

                        case 7:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            return regeneratorRuntime.async(function componentWillReceiveProps$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!(nextProps.entityPanel.hidden === true && this.props.entityPanel.hidden === false)) {
                                _context2.next = 9;
                                break;
                            }

                            _context2.next = 3;
                            return regeneratorRuntime.awrap(this.setState({ collectionType: nextProps.collectionType }));

                        case 3:
                            this.createPageRequestForEntityPanel(nextProps.entityPanel.relatedEntity.relatedEntityCriteria);
                            this.setElementsToCheckForEntityPanel(nextProps.entityPanel.relatedEntity.relatedEntities);
                            _context2.next = 7;
                            return regeneratorRuntime.awrap(this.getPage(this.state.collectionType));

                        case 7:
                            _context2.next = 17;
                            break;

                        case 9:
                            if (!(nextProps.collectionType !== this.state.collectionType || nextProps.entityPanel.mode === 'disabled' && this.props.entityPanel.mode !== 'disabled')) {
                                _context2.next = 17;
                                break;
                            }

                            this.setState({ isFiltered: false });
                            this.createPageRequest(nextProps.collectionType);
                            this.setPossibleOperations(nextProps.collectionType);
                            _context2.next = 15;
                            return regeneratorRuntime.awrap(this.setState({ collectionType: nextProps.collectionType }));

                        case 15:
                            _context2.next = 17;
                            return regeneratorRuntime.awrap(this.getPage(this.state.collectionType));

                        case 17:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'setElementsToCheckForEntityPanel',
        value: function setElementsToCheckForEntityPanel(relatedEntities) {
            if (this.props.entityPanel.relatedEntity.relatedEntityType === "participatedTournaments") {
                var relatedEntitiesNames = relatedEntities.map(function (relatedEntity) {
                    return relatedEntity.name;
                });
                this.props.setElementsToCheck(relatedEntitiesNames);
            } else {
                this.props.setElementsToCheck(relatedEntities);
            }
        }
    }, {
        key: 'createPageRequestForEntityPanel',
        value: function createPageRequestForEntityPanel(relatedEntityCriteria) {
            this.props.setPageRequest({
                searchCriteria: relatedEntityCriteria,
                pageRequest: {
                    direction: "ASC",
                    property: "name",
                    size: 10,
                    page: 0
                }
            });
        }
    }, {
        key: 'createPageRequest',
        value: function createPageRequest(collectionType) {
            if (collectionType === 'ranking') {
                this.props.setPageRequest({
                    searchCriteria: [{
                        "keys": ["tour", "tournament", "game", "name"],
                        "operation": ":",
                        "value": ["Warhammer"]
                    }],
                    pageRequest: {
                        direction: "DESC",
                        property: "points",
                        size: 10,
                        page: 0
                    }
                });
            } else {
                this.props.setPageRequest({
                    searchCriteria: [],
                    pageRequest: {
                        direction: "ASC",
                        property: "name",
                        size: 10,
                        page: 0
                    }
                });
            }
        }
    }, {
        key: 'setPossibleOperations',
        value: function setPossibleOperations(collectionType) {
            this.props.setOperations((0, _possibleOperationsForCollections2.default)(collectionType, this.props.security.role));
        }
    }, {
        key: 'getPage',
        value: function getPage(collectionType) {
            var _this2 = this;

            var getPageOfDataOperation;
            return regeneratorRuntime.async(function getPage$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            console.log("page request:");
                            console.log(this.props.pageRequest);

                            getPageOfDataOperation = function getPageOfDataOperation() {
                                return regeneratorRuntime.async(function getPageOfDataOperation$(_context5) {
                                    while (1) {
                                        switch (_context5.prev = _context5.next) {
                                            case 0:
                                                _this2.props.startLoading("Fetching page of data...");
                                                _context5.next = 3;
                                                return regeneratorRuntime.awrap(_axios2.default.post(_serverName.serverName + 'page/' + collectionType, _this2.props.pageRequest, {
                                                    headers: {
                                                        "X-Auth-Token": _this2.props.security.token
                                                    }
                                                }).then(function _callee(res) {
                                                    return regeneratorRuntime.async(function _callee$(_context3) {
                                                        while (1) {
                                                            switch (_context3.prev = _context3.next) {
                                                                case 0:
                                                                    console.log("page of data:");
                                                                    console.log(res.data);
                                                                    _this2.props.checkPreviouslyCheckedElements(res.data);
                                                                    _this2.props.setPageRequest({
                                                                        searchCriteria: _this2.props.pageRequest.searchCriteria,
                                                                        pageRequest: {
                                                                            direction: _this2.props.pageRequest.pageRequest.direction,
                                                                            property: _this2.props.pageRequest.pageRequest.property,
                                                                            size: _this2.props.page.numberOfElements,
                                                                            page: _this2.props.page.number
                                                                        }
                                                                    });
                                                                    _this2.props.stopLoading();

                                                                case 5:
                                                                case 'end':
                                                                    return _context3.stop();
                                                            }
                                                        }
                                                    }, null, _this2);
                                                }).catch(function _callee2(error) {
                                                    return regeneratorRuntime.async(function _callee2$(_context4) {
                                                        while (1) {
                                                            switch (_context4.prev = _context4.next) {
                                                                case 0:
                                                                    _this2.props.stopLoading();

                                                                    _this2.props.setEmptyPage();
                                                                    _this2.props.showNetworkErrorMessage(error, getPageOfDataOperation);
                                                                    _this2.props.setPageRequest({
                                                                        searchCriteria: _this2.props.pageRequest.searchCriteria,
                                                                        pageRequest: {
                                                                            direction: _this2.props.pageRequest.pageRequest.direction,
                                                                            property: _this2.props.pageRequest.pageRequest.property,
                                                                            size: 0,
                                                                            page: 0
                                                                        }
                                                                    });

                                                                case 4:
                                                                case 'end':
                                                                    return _context4.stop();
                                                            }
                                                        }
                                                    }, null, _this2);
                                                }));

                                            case 3:
                                            case 'end':
                                                return _context5.stop();
                                        }
                                    }
                                }, null, _this2);
                            };

                            _context6.next = 5;
                            return regeneratorRuntime.awrap(getPageOfDataOperation());

                        case 5:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'createDrawer',
        value: function createDrawer() {
            var _this3 = this;

            var formDrawer = _react2.default.createElement(_reactNative.View, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 180
                }
            });
            if (this.state.formDrawer !== '') formDrawer = _react2.default.createElement(drawerMap[this.state.formDrawer], {
                getPage: this.getPage.bind(this),
                collectionType: this.props.collectionType,
                onClosePanel: function onClosePanel() {
                    return _this3._drawer.close();
                },
                changeFilterColour: function changeFilterColour(value) {
                    return _this3.setState({ isFiltered: value });
                }
            }, null);
            return formDrawer;
        }
    }, {
        key: 'createButtons',
        value: function createButtons() {
            var _this4 = this;

            var buttons = [];
            if ((0, _compareArrays2.default)(this.props.possibleOperations, ["Invite"])) {
                buttons = [_react2.default.createElement(_InviteButton2.default, { key: 'invite', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 200
                    }
                }), _react2.default.createElement(_CancelInviteButton2.default, { key: 'cancelInvite', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 201
                    }
                })];
            } else if (this.props.collectionType !== 'ranking' && this.props.security.role !== "") {
                buttons.push(_react2.default.createElement(_OpenOperationsButton2.default, { key: 'openOperations', action: function action() {
                        return _this4.setState({ optionsVisible: true });
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 205
                    }
                }));
            }
            return buttons;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this5 = this;

            var formDrawer = this.createDrawer();
            var buttons = this.createButtons();

            return _react2.default.createElement(
                _reactNativeDrawer2.default,
                {
                    ref: function ref(_ref) {
                        return _this5._drawer = _ref;
                    },
                    type: 'overlay',
                    tapToClose: true,
                    openDrawerOffset: 0.2,
                    panCloseMask: 0.2,
                    styles: _DrawerStyles2.default,
                    closedDrawerOffset: 0,
                    tweenHandler: function tweenHandler(ratio) {
                        return { main: { opacity: (2 - ratio) / 2 } };
                    },
                    content: formDrawer,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 215
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_MainStyles2.default.contentStyle], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 226
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: { marginBottom: 3, flexDirection: 'row' }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 227
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: { flex: 1, marginRight: 3 }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 228
                                }
                            },
                            _react2.default.createElement(_reactNative.Button, { title: 'Open page tab', color: '#4b371b',
                                onPress: function onPress() {
                                    _this5.setState({ formDrawer: 'page' });
                                    _this5._drawer.open();
                                }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 229
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: { flex: 1 }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 234
                                }
                            },
                            _react2.default.createElement(_reactNative.Button, { title: 'Open search tab', color: this.state.isFiltered ? _BaseColours2.default.border.bottom : _BaseColours2.default.background.darkBrown,
                                onPress: function onPress() {
                                    _this5.setState({ formDrawer: 'search' });
                                    _this5._drawer.open();
                                }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 235
                                }
                            })
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: { flex: 1 }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 241
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: [_DrawerStyles2.default.pageWindow, _MainStyles2.default.borderStyle], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 242
                                }
                            },
                            _react2.default.createElement(_reactNative.Button, {
                                title: this.props.pageRequest.pageRequest.page + 1 + "/" + (this.props.page.totalPages === undefined ? 0 : this.props.page.totalPages),
                                color: '#721515',
                                onPress: function onPress() {},
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 243
                                }
                            })
                        ),
                        _react2.default.createElement(_CollectionList2.default, { getPage: this.getPage.bind(this),
                            collectionType: this.props.collectionType, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 250
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: _MainStyles2.default.buttonsPanelStyle, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 253
                            }
                        },
                        buttons
                    )
                ),
                _react2.default.createElement(_OptionPanel2.default, {
                    collectionType: this.props.collectionType,
                    onClosePanel: function onClosePanel(isVisible) {
                        return _this5.setState({ optionsVisible: isVisible });
                    },
                    isVisible: this.state.optionsVisible, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 257
                    }
                })
            );
        }
    }]);
    return CollectionPanel;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_actions.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        page: state.page,
        pageRequest: state.pageRequest,
        entityPanel: state.entityPanel,
        possibleOperations: state.possibleOperations,
        security: state.security
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(CollectionPanel);