Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/tournamentManage/components/battlePopup/BattlePopup2x2.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _PlayerCard2x = require('./playerCard/PlayerCard2x2');

var _PlayerCard2x2 = babelHelpers.interopRequireDefault(_PlayerCard2x);

var _reactNativeModal = require('react-native-modal');

var _reactNativeModal2 = babelHelpers.interopRequireDefault(_reactNativeModal);

var _GroupPlayerList = require('../playerList/GroupPlayerList');

var _GroupPlayerList2 = babelHelpers.interopRequireDefault(_GroupPlayerList);

var _MainStyles = require('battleCraftMobile/App/Styles/UniversalStyles/MainStyles');

var _MainStyles2 = babelHelpers.interopRequireDefault(_MainStyles);

var _BattleInspectorStyle = require('battleCraftMobile/App/Styles/BattlePanelStyles/BattleInspectorStyle');

var _BattleInspectorStyle2 = babelHelpers.interopRequireDefault(_BattleInspectorStyle);

var _TournamentStyles = require('battleCraftMobile/App/Styles/BattlePanelStyles/TournamentStyles');

var _TournamentStyles2 = babelHelpers.interopRequireDefault(_TournamentStyles);

var _BaseColours = require('battleCraftMobile/App/main/consts/BaseColours');

var _BaseColours2 = babelHelpers.interopRequireDefault(_BaseColours);

var _ListColours = require('battleCraftMobile/App/main/consts/ListColours');

var _ListColours2 = babelHelpers.interopRequireDefault(_ListColours);

var _index = require('../../../../redux/actions/index');

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _compareArrays = require('../../../../main/functions/compareArrays');

var _compareArrays2 = babelHelpers.interopRequireDefault(_compareArrays);

var BattleInspector = function (_Component) {
    babelHelpers.inherits(BattleInspector, _Component);

    function BattleInspector(props) {
        babelHelpers.classCallCheck(this, BattleInspector);

        var _this = babelHelpers.possibleConstructorReturn(this, (BattleInspector.__proto__ || Object.getPrototypeOf(BattleInspector)).call(this, props));

        _this.state = {
            battleData: {
                tableNumber: 0,
                firstPlayersGroup: {
                    playersNames: ["", ""],
                    playersPoints: 0
                },
                secondPlayersGroup: {
                    playersNames: ["", ""],
                    playersPoints: 0
                },
                finished: false

            },
            playersWithoutBattles: [],
            usersListVisible: false,
            numberOfPlayersToChange: -1,
            componentReady: false
        };
        return _this;
    }

    babelHelpers.createClass(BattleInspector, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setState({ battleData: JSON.parse(JSON.stringify(this.props.battleData)) });
            this.setState({ playersWithoutBattles: JSON.parse(JSON.stringify(this.props.playersWithoutBattles[this.props.battleData.tourNumber])) });
            this.setState({ componentReady: true });
        }
    }, {
        key: 'showUsersList',
        value: function showUsersList(numberOfPlayersToChange) {
            this.setState({ numberOfPlayersToChange: numberOfPlayersToChange });
            this.setState({ usersListVisible: true });
        }
    }, {
        key: 'hideUsersList',
        value: function hideUsersList() {
            this.setState({ usersListVisible: false });
        }
    }, {
        key: 'calculatePanelHeight',
        value: function calculatePanelHeight() {
            return this.props.dimension.orientation === 'portrait' ? this.props.dimension.height * 0.70 : this.props.dimension.height * 0.75;
        }
    }, {
        key: 'chooseRandomPlayers',
        value: function chooseRandomPlayers() {
            var playersNames = this.state.playersWithoutBattles;

            playersNames.splice(playersNames.indexOf(["", ""]), 1);
            var battleData = this.state.battleData;

            if (!(0, _compareArrays2.default)(battleData.firstPlayersGroup.playersNames, ["", ""]) && playersNames.indexOf(battleData.firstPlayersGroup.playersNames) === -1) {
                playersNames.unshift(battleData.firstPlayersGroup.playersNames);
            }
            if (!(0, _compareArrays2.default)(battleData.secondPlayersGroup.playersNames, ["", ""]) && playersNames.indexOf(battleData.secondPlayersGroup.playersNames) === -1) {
                playersNames.unshift(battleData.secondPlayersGroup.playersNames);
            }

            var firstRandomNames = playersNames[Math.floor(Math.random() * playersNames.length)];
            var secondRandomNames = playersNames[Math.floor(Math.random() * playersNames.length)];
            if ((0, _compareArrays2.default)(firstRandomNames, secondRandomNames)) {
                var indexOfFirstNames = playersNames.indexOf(firstRandomNames);
                if (indexOfFirstNames > 0) {
                    secondRandomNames = playersNames[indexOfFirstNames - 1];
                } else {
                    secondRandomNames = playersNames[indexOfFirstNames + 1];
                }
            }

            playersNames.splice(playersNames.indexOf(firstRandomNames), 1);
            battleData.firstPlayersGroup = {
                playersNames: firstRandomNames,
                playersPoints: 0
            };

            playersNames.splice(playersNames.indexOf(secondRandomNames), 1);
            battleData.secondPlayersGroup = {
                playersNames: secondRandomNames,
                playersPoints: 0
            };

            playersNames.push(["", ""]);
            this.setState({ battleData: battleData, playersWithoutBattles: playersNames });
        }
    }, {
        key: 'changePlayersData',
        value: function changePlayersData(changedPlayersNames) {
            var battleData = this.state.battleData;
            if (this.state.numberOfPlayersToChange === 0) {
                this.changePlayersWithoutBattles(battleData.firstPlayersGroup.playersNames, changedPlayersNames);
                battleData.firstPlayersGroup = {
                    playersNames: changedPlayersNames,
                    playersPoints: 0
                };
            } else if (this.state.numberOfPlayersToChange === 1) {
                this.changePlayersWithoutBattles(battleData.secondPlayersGroup.playersNames, changedPlayersNames);
                battleData.secondPlayersGroup = {
                    playersNames: changedPlayersNames,
                    playersPoints: 0
                };
            }

            this.setState({ usersListVisible: false, battleData: battleData });
        }
    }, {
        key: 'clearBattleData',
        value: function clearBattleData() {
            var _this2 = this;

            this.props.showConfirmationDialog({
                header: "Clear data for battle",
                message: "Are you sure?",
                onConfirmFunction: function onConfirmFunction() {
                    return _this2.clearBattleDataFunction();
                }
            });
        }
    }, {
        key: 'clearBattleDataFunction',
        value: function clearBattleDataFunction() {
            this.state.battleData.firstPlayersGroup.playersNames = ["", ""];
            this.state.battleData.secondPlayersGroup.playersNames = ["", ""];
            this.state.battleData.firstPlayersGroup.playersPoints = 0;
            this.state.battleData.secondPlayersGroup.playersPoints = 0;
            this.props.sendBattleData(this.state.battleData);
            this.props.hidePopup();
        }
    }, {
        key: 'changePlayersWithoutBattles',
        value: function changePlayersWithoutBattles(playerNamesToPush, playerNamesToPop) {
            var playersWithoutBattles = this.state.playersWithoutBattles;
            if (!(0, _compareArrays2.default)(playerNamesToPush, ["", ""])) {
                playersWithoutBattles.unshift(playerNamesToPush);
            }
            if (!(0, _compareArrays2.default)(playerNamesToPop, ["", ""])) {
                playersWithoutBattles.splice(playersWithoutBattles.indexOf(playerNamesToPop), 1);
            }
            this.setState({ playersWithoutBattles: playersWithoutBattles });
        }
    }, {
        key: 'changePointsOfFirstPlayersGroup',
        value: function changePointsOfFirstPlayersGroup(points) {
            var battleData = this.state.battleData;
            battleData.firstPlayersGroup.playersPoints = isNaN(points) ? "" : points;
            this.setState({ battleData: battleData });
        }
    }, {
        key: 'changePointsOfSecondPlayersGroup',
        value: function changePointsOfSecondPlayersGroup(points) {
            var battleData = this.state.battleData;
            battleData.secondPlayersGroup.playersPoints = isNaN(points) ? "" : points;
            this.setState({ battleData: battleData });
        }
    }, {
        key: 'sendBattleData',
        value: function sendBattleData() {
            if (isNaN(this.state.battleData.firstPlayersGroup.playersPoints) || this.state.battleData.firstPlayersGroup.playersPoints === undefined) {
                this.props.showFailureMessage("First player points cannot be empty");
            } else if (isNaN(this.state.battleData.secondPlayersGroup.playersPoints) || this.state.battleData.secondPlayersGroup.playersPoints === undefined) {
                this.props.showFailureMessage("Second player points cannot be empty");
            } else if (this.state.battleData.firstPlayersGroup.playersPoints + this.state.battleData.secondPlayersGroup.playersPoints > 20 || this.state.battleData.firstPlayersGroup.playersPoints < 0 || this.state.battleData.secondPlayersGroup.playersPoints < 0) {
                this.props.showFailureMessage("Points number should be between 0 to 20 and summary of points should not be greater than 20");
            } else if (this.state.battleData.firstPlayersGroup.playersNames[0] === "") {
                this.props.showFailureMessage("First player in first group slot cannot be empty");
            } else if (this.state.battleData.firstPlayersGroup.playersNames[1] === "") {
                this.props.showFailureMessage("Second player in first group slot cannot be empty");
            } else if (this.state.battleData.secondPlayersGroup.playersNames[0] === "") {
                this.props.showFailureMessage("First player in first group slot cannot be empty");
            } else if (this.state.battleData.secondPlayersGroup.playersNames[1] === "") {
                this.props.showFailureMessage("Second player in first group slot cannot be empty");
            } else {
                var sendBattleData = this.props.sendBattleData;
                var hidePopup = this.props.hidePopup;
                var battleData = this.state.battleData;

                this.props.showConfirmationDialog({
                    header: "Save data for battle",
                    message: "Are you sure?",
                    onConfirmFunction: function onConfirmFunction() {
                        sendBattleData(battleData);
                        hidePopup();
                    }
                });
            }
        }
    }, {
        key: 'getVSIcon',
        value: function getVSIcon() {
            return this.props.battleData.finished ? require('battleCraftMobile/img/vsIconFinished.png') : require('battleCraftMobile/img/vsIcon.png');
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var scoreBackground = void 0;
            if (this.state.battleData.firstPlayersGroup.playersPoints === this.state.battleData.secondPlayersGroup.playersPoints) {
                scoreBackground = { P1: _ListColours2.default.battle.DRAW, P2: _ListColours2.default.battle.DRAW };
            } else if (this.state.battleData.firstPlayersGroup.playersPoints > this.state.battleData.secondPlayersGroup.playersPoints) {
                scoreBackground = { P1: _ListColours2.default.battle.WIN, P2: _ListColours2.default.battle.LOSE };
            } else scoreBackground = { P1: _ListColours2.default.battle.LOSE, P2: _ListColours2.default.battle.WIN };

            var totalBackground = void 0;
            if (this.props.playersNamesWithPoints[this.state.battleData.firstPlayersGroup.playersNames[0]] === this.props.playersNamesWithPoints[this.state.battleData.secondPlayersGroup.playersNames[0]]) {
                totalBackground = { P1: _ListColours2.default.battle.DRAW, P2: _ListColours2.default.battle.DRAW };
            } else if (this.props.playersNamesWithPoints[this.state.battleData.firstPlayersGroup.playersNames[0]] > this.props.playersNamesWithPoints[this.state.battleData.secondPlayersGroup.playersNames[0]]) {
                totalBackground = { P1: _ListColours2.default.battle.WIN, P2: _ListColours2.default.battle.LOSE };
            } else totalBackground = { P1: _ListColours2.default.battle.LOSE, P2: _ListColours2.default.battle.WIN };

            var panelHeight = this.calculatePanelHeight();

            var firstPlayersNamesGroupWithPoints = this.props.playersNamesWithPoints.find(function (playersGroupNamesWithPoints) {
                return (0, _compareArrays2.default)(playersGroupNamesWithPoints.playersInGroupNames, _this3.props.battleData.firstPlayersGroup.playersNames);
            });
            var firstPlayersGroupTotalPoints = firstPlayersNamesGroupWithPoints ? firstPlayersNamesGroupWithPoints.points : 0;

            var secondPlayersNamesGroupWithPoints = this.props.playersNamesWithPoints.find(function (playersGroupNamesWithPoints) {
                return (0, _compareArrays2.default)(playersGroupNamesWithPoints.playersInGroupNames, _this3.props.battleData.secondPlayersGroup.playersNames);
            });
            var secondPlayersGroupTotalPoints = secondPlayersNamesGroupWithPoints ? secondPlayersNamesGroupWithPoints.points : 0;

            return _react2.default.createElement(
                _reactNative.View,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 269
                    }
                },
                _react2.default.createElement(
                    _reactNativeModal2.default,
                    { isVisible: true, backdropOpacity: 0.3, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 270
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_BattleInspectorStyle2.default.modal, { width: this.props.dimension.width * 0.9, height: panelHeight }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 271
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.ScrollView,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 272
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: [_BattleInspectorStyle2.default.battleHeader, _MainStyles2.default.borderStyle], __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 273
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    { style: [_MainStyles2.default.textStyle, { fontSize: 24 }], __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 273
                                        }
                                    },
                                    'Battle'
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableHighlight,
                                {
                                    onPress: this.chooseRandomPlayers.bind(this),
                                    style: [_TournamentStyles2.default.staticWindow, _TournamentStyles2.default.randomizeWindow, _MainStyles2.default.borderStyle], __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 274
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, { style: _TournamentStyles2.default.diceIcon, source: require('battleCraftMobile/img/diceIcon.png'), __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 277
                                    }
                                })
                            ),
                            _react2.default.createElement(_PlayerCard2x2.default, { playersNames: this.state.battleData.firstPlayersGroup.playersNames,
                                playersPoints: this.state.battleData.firstPlayersGroup.playersPoints,
                                changeData: this.changePointsOfFirstPlayersGroup.bind(this),
                                totalPoints: firstPlayersGroupTotalPoints,
                                colour: _BaseColours2.default.misc.greyBlue,
                                showUsersList: function showUsersList() {
                                    return _this3.showUsersList(0);
                                },
                                scoreBackground: scoreBackground.P1,
                                totalBackground: totalBackground.P1, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 279
                                }
                            }),
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: [_BattleInspectorStyle2.default.vsCard, _MainStyles2.default.borderStyle], __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 288
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, { style: { alignSelf: 'center', width: 60, height: 60 }, source: this.getVSIcon(), __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 289
                                    }
                                }),
                                _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 290
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.View,
                                        { style: _BattleInspectorStyle2.default.dataRow, __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 291
                                            }
                                        },
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 291
                                                }
                                            },
                                            'Table number:'
                                        )
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.View,
                                        { style: [_BattleInspectorStyle2.default.dataRow, { borderBottomWidth: 0 }], __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 292
                                            }
                                        },
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            { numberOfLines: 1, style: _MainStyles2.default.bigWhiteStyle, __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 292
                                                }
                                            },
                                            this.state.battleData.tableNumber + 1
                                        )
                                    )
                                )
                            ),
                            _react2.default.createElement(_PlayerCard2x2.default, { playersNames: this.state.battleData.secondPlayersGroup.playersNames,
                                playersPoints: this.state.battleData.secondPlayersGroup.playersPoints,
                                changeData: this.changePointsOfSecondPlayersGroup.bind(this),
                                totalPoints: secondPlayersGroupTotalPoints,
                                colour: _BaseColours2.default.misc.deepRed,
                                showUsersList: function showUsersList() {
                                    return _this3.showUsersList(1);
                                },
                                scoreBackground: scoreBackground.P2,
                                totalBackground: totalBackground.P2, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 295
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: _MainStyles2.default.buttonsPanelStyle, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 304
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: { flex: 1, marginRight: 3 }, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 305
                                    }
                                },
                                _react2.default.createElement(_reactNative.Button, { title: "Close", color: '#4b371b', onPress: this.props.hidePopup.bind(this), __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 306
                                    }
                                })
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: { flex: 1, marginRight: 3 }, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 308
                                    }
                                },
                                _react2.default.createElement(_reactNative.Button, { title: "Clear", color: '#4b371b', onPress: this.clearBattleData.bind(this), __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 309
                                    }
                                })
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: { flex: 1 }, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 311
                                    }
                                },
                                _react2.default.createElement(_reactNative.Button, { title: "Save", color: '#4b371b', onPress: this.sendBattleData.bind(this), __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 312
                                    }
                                })
                            )
                        )
                    )
                ),
                this.state.usersListVisible && _react2.default.createElement(_GroupPlayerList2.default, { hideList: function hideList() {
                        return _this3.hideUsersList();
                    },
                    changePlayersData: this.changePlayersData.bind(this),
                    playersWithoutBattles: this.state.playersWithoutBattles, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 318
                    }
                })
            );
        }
    }]);
    return BattleInspector;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_index.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        dimension: state.dimension
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(BattleInspector);