Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.editEntity = editEntity;
exports.addEntity = addEntity;
exports.getEntity = getEntity;
exports.closeEntityPanel = closeEntityPanel;
exports.showEntityPanel = showEntityPanel;
exports.setRelatedEntity = setRelatedEntity;
exports.cancelEntityPanelOperation = cancelEntityPanelOperation;
exports.changeRelatedEntities = changeRelatedEntities;

var _entityPanel = require('../types/entityPanel');

var types = babelHelpers.interopRequireWildcard(_entityPanel);
function editEntity(entityType, entityName) {
    return {
        type: types.EDIT_ENTITY,
        entityType: entityType,
        entityName: entityName
    };
}

function addEntity(entityType) {
    return {
        type: types.ADD_ENTITY,
        entityType: entityType
    };
}

function getEntity(entityType, entityName) {
    return {
        type: types.GET_ENTITY,
        entityType: entityType,
        entityName: entityName
    };
}

function closeEntityPanel() {
    return {
        type: types.CLOSE_ENTITY_PANEL
    };
}

function showEntityPanel() {
    return {
        type: types.SHOW_ENTITY_PANEL
    };
}

function setRelatedEntity(relatedEntities, relatedEntityType, relatedEntityCriteria, relatedEntityLimit) {
    return {
        type: types.SET_RELATED_ENTITY,
        relatedEntities: relatedEntities,
        relatedEntityType: relatedEntityType,
        relatedEntityCriteria: relatedEntityCriteria,
        relatedEntityLimit: relatedEntityLimit
    };
}

function cancelEntityPanelOperation() {
    return {
        type: types.CANCEL_ENTITY_PANEL_OPERATION
    };
}

function changeRelatedEntities(relatedEntities) {
    return {
        type: types.CHANGE_RELATED_ENTITIES,
        relatedEntities: relatedEntities
    };
}