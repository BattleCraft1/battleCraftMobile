Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/commonComponents/SoundManager.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _expo = require('expo');

var _expo2 = babelHelpers.interopRequireDefault(_expo);

var _reactRedux = require('react-redux');

var _index = require('../../redux/actions/index');

var _redux = require('redux');

var regeneratorRuntime = require('regenerator-runtime');

var soundToggle = new _expo2.default.Audio.Sound();
var soundFanfare = new _expo2.default.Audio.Sound();

var SoundManager = function (_Component) {
    babelHelpers.inherits(SoundManager, _Component);

    function SoundManager(props) {
        var _this2 = this;

        babelHelpers.classCallCheck(this, SoundManager);

        var _this = babelHelpers.possibleConstructorReturn(this, (SoundManager.__proto__ || Object.getPrototypeOf(SoundManager)).call(this, props));

        _this.loadSound = function _callee() {
            return regeneratorRuntime.async(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!_this.state.soundNotLoaded) {
                                _context.next = 25;
                                break;
                            }

                            _context.next = 3;
                            return regeneratorRuntime.awrap(_expo2.default.Audio.setIsEnabledAsync(true));

                        case 3:
                            _context.prev = 3;
                            _context.next = 6;
                            return regeneratorRuntime.awrap(soundToggle.loadAsync(require('battleCraftMobile/sounds/buttonToggle.mp3')));

                        case 6:
                            _this.setState({ soundNotLoaded: false });
                            console.log("Toggle sound loaded");
                            _context.next = 14;
                            break;

                        case 10:
                            _context.prev = 10;
                            _context.t0 = _context['catch'](3);

                            console.log("Toggle sound not loaded");
                            console.log(_context.t0);

                        case 14:
                            _context.prev = 14;
                            _context.next = 17;
                            return regeneratorRuntime.awrap(soundFanfare.loadAsync(require('battleCraftMobile/sounds/fanfare.mp3')));

                        case 17:
                            _this.setState({ soundNotLoaded: false });
                            console.log("Fanfare sound loaded");
                            _context.next = 25;
                            break;

                        case 21:
                            _context.prev = 21;
                            _context.t1 = _context['catch'](14);

                            console.log("Fanfare sound not loaded");
                            console.log(_context.t1);

                        case 25:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, null, _this2, [[3, 10], [14, 21]]);
        };

        _this.play = function _callee2(name) {
            return regeneratorRuntime.async(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.t0 = name;
                            _context2.next = _context2.t0 === 'toggle' ? 3 : _context2.t0 === 'fanfare' ? 8 : 13;
                            break;

                        case 3:
                            _context2.next = 5;
                            return regeneratorRuntime.awrap(soundToggle.setPositionAsync(0));

                        case 5:
                            _context2.next = 7;
                            return regeneratorRuntime.awrap(soundToggle.playAsync());

                        case 7:
                            return _context2.abrupt('break', 15);

                        case 8:
                            _context2.next = 10;
                            return regeneratorRuntime.awrap(soundFanfare.setPositionAsync(0));

                        case 10:
                            _context2.next = 12;
                            return regeneratorRuntime.awrap(soundFanfare.playAsync());

                        case 12:
                            return _context2.abrupt('break', 15);

                        case 13:
                            console.log(name + " - No sound found");
                            return _context2.abrupt('break', 15);

                        case 15:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, null, _this2);
        };

        _this.state = {
            soundNotLoaded: true
        };

        return _this;
    }

    babelHelpers.createClass(SoundManager, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            return regeneratorRuntime.async(function componentDidMount$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            _context3.next = 2;
                            return regeneratorRuntime.awrap(this.loadSound());

                        case 2:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.play(nextProps.sound.name);
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_reactNative.View, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 79
                }
            });
        }
    }]);
    return SoundManager;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_index.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        sound: state.sound
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(SoundManager);