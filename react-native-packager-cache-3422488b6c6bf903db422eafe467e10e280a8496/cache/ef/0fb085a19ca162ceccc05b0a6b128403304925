Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.page = undefined;

var _createReducer;

var _createReducer2 = require('../lib/createReducer');

var _createReducer3 = babelHelpers.interopRequireDefault(_createReducer2);

var _page = require('../types/page');

var types = babelHelpers.interopRequireWildcard(_page);
var page = exports.page = (0, _createReducer3.default)({}, (_createReducer = {}, babelHelpers.defineProperty(_createReducer, types.CHECK_PREVIOUSLY_CHECKED_ELEMENTS, function (state, action) {
    action.page.checkedElementsNames = state.checkedElementsNames;
    action.page.content.forEach(function (element) {
        element.checked = state.checkedElementsNames.indexOf(element.name) !== -1;
    });
    return action.page;
}), babelHelpers.defineProperty(_createReducer, types.SET_EMPTY_PAGE, function (state, action) {
    return {
        checkedElementsNames: [],
        numberOfElements: 0,
        content: [],
        totalElements: 0,
        size: 0,
        totalPages: 0
    };
}), babelHelpers.defineProperty(_createReducer, types.SET_ELEMENTS_TO_CHECK, function (state, action) {
    state.checkedElementsNames = JSON.parse(JSON.stringify(action.elementsNames));
    return Object.create(state);
}), babelHelpers.defineProperty(_createReducer, types.CHECK_ALL_ELEMENTS, function (state, action) {
    var elementToCheckNames = state.content.map(function (element) {
        element.checked = action.checked;
        return element.name;
    });
    actualizeCheckedElementsList(state.checkedElementsNames, action.checked, elementToCheckNames);
    return Object.create(state);
}), babelHelpers.defineProperty(_createReducer, types.CHECK_ELEMENTS, function (state, action) {
    var elementToCheckNames = state.content.filter(function (element) {
        return action.elementsNames.indexOf(element.name) !== -1;
    }).map(function (element) {
        element.checked = action.checked;
        return element.name;
    });
    actualizeCheckedElementsList(state.checkedElementsNames, action.checked, elementToCheckNames);
    return Object.create(state);
}), babelHelpers.defineProperty(_createReducer, types.CHECK_ELEMENT, function (state, action) {
    var elementToCheck = state.content.find(function (element) {
        return element.name === action.elementName;
    });
    elementToCheck.checked = action.checked;
    actualizeCheckedElementsList(state.checkedElementsNames, action.checked, [elementToCheck.name]);
    return Object.create(state);
}), babelHelpers.defineProperty(_createReducer, types.CLEAR_CHECKED_ELEMENTS, function (state, action) {
    state.checkedElementsNames = [];
    state.content.forEach(function (element) {
        element.checked = false;
    });
    return Object.create(state);
}), _createReducer));

function actualizeCheckedElementsList(checkedElementsNames, checked, elementsToCheckNames) {
    elementsToCheckNames.forEach(function (elementToCheckName) {
        if (checked) {
            if (checkedElementsNames.indexOf(elementToCheckName) === -1) {
                checkedElementsNames.push(elementToCheckName);
            }
        } else {
            if (checkedElementsNames.indexOf(elementToCheckName) !== -1) {
                checkedElementsNames.splice(checkedElementsNames.indexOf(elementToCheckName), 1);
            }
        }
    });
}