Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/entityPanel/user/Panel.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNativeModal = require('react-native-modal');

var _reactNativeModal2 = babelHelpers.interopRequireDefault(_reactNativeModal);

var _MainStyles = require('../../../Styles/UniversalStyles/MainStyles');

var _MainStyles2 = babelHelpers.interopRequireDefault(_MainStyles);

var _EntityPanelStyle = require('../../../Styles/CollectionPanelStyles/EntityPanelStyle');

var _EntityPanelStyle2 = babelHelpers.interopRequireDefault(_EntityPanelStyle);

var _PersonalDataTab = require('./tabs/PersonalDataTab');

var _PersonalDataTab2 = babelHelpers.interopRequireDefault(_PersonalDataTab);

var _AddressTab = require('./tabs/AddressTab');

var _AddressTab2 = babelHelpers.interopRequireDefault(_AddressTab);

var _PlayerTab = require('./tabs/PlayerTab');

var _PlayerTab2 = babelHelpers.interopRequireDefault(_PlayerTab);

var _OrganizerTab = require('./tabs/OrganizerTab');

var _OrganizerTab2 = babelHelpers.interopRequireDefault(_OrganizerTab);

var _BaseColours = require('battleCraftMobile/App/main/consts/BaseColours');

var _BaseColours2 = babelHelpers.interopRequireDefault(_BaseColours);

var _Navigation = require('./navigation/Navigation');

var _Navigation2 = babelHelpers.interopRequireDefault(_Navigation);

var _index = require('../../../redux/actions/index');

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _serverName = require('../../../main/consts/serverName');

var _axios = require('axios');

var _axios2 = babelHelpers.interopRequireDefault(_axios);

var _checkIfObjectIsNotEmpty = require('../../../main/functions/checkIfObjectIsNotEmpty');

var _checkIfObjectIsNotEmpty2 = babelHelpers.interopRequireDefault(_checkIfObjectIsNotEmpty);

var _UserValidator = require('../validators/UserValidator');

var _UserValidator2 = babelHelpers.interopRequireDefault(_UserValidator);

var _loginUserWithChangedUsername = require('../../../main/functions/loginUserWithChangedUsername');

var _loginUserWithChangedUsername2 = babelHelpers.interopRequireDefault(_loginUserWithChangedUsername);

var _getDatesDifferenceInDays = require('../../../main/functions/getDatesDifferenceInDays');

var _getDatesDifferenceInDays2 = babelHelpers.interopRequireDefault(_getDatesDifferenceInDays);

var _expo = require('expo');

var regeneratorRuntime = require('regenerator-runtime');

var db = _expo.SQLite.openDatabase({ name: 'tokens2.db' });

var Panel = function (_Component) {
    babelHelpers.inherits(Panel, _Component);

    function Panel(props) {
        babelHelpers.classCallCheck(this, Panel);

        var _this = babelHelpers.possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));

        _this.state = {
            activeTab: "",
            entity: {
                "name": "",
                "nameChange": "",
                "email": "",
                "firstname": "",
                "lastname": "",
                "phoneNumber": "",
                "status": "",
                "points": 0,
                "numberOfBattles": 0,
                "participatedTournaments": [],
                "finishedParticipatedTournaments": [],
                "organizedTournaments": [],
                "finishedOrganizedTournaments": [],
                "createdGames": [],
                "banned": false,
                "canCurrentUserEdit": false
            },
            validationErrors: {
                "name": "",
                "nameChange": "",
                "email": "",
                "firstname": "",
                "lastname": "",
                "phoneNumber": "",
                "province": "",
                "city": "",
                "street": "",
                "zipCode": "",
                "description": "",
                "participatedTournaments": "",
                "organizedTournaments": ""
            },
            tabsMap: {},
            tabsNamesMap: {},
            shouldActualizeRelatedEntities: false
        };
        return _this;
    }

    babelHelpers.createClass(Panel, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var getEntityOperation;
            return regeneratorRuntime.async(function componentDidMount$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            getEntityOperation = function getEntityOperation() {
                                return regeneratorRuntime.async(function getEntityOperation$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _this2.props.startLoading("Fetching user...");
                                                _context.next = 3;
                                                return regeneratorRuntime.awrap(_axios2.default.get(_serverName.serverName + 'get/user?name=' + _this2.props.name, {
                                                    headers: {
                                                        "X-Auth-Token": _this2.props.security.token
                                                    }
                                                }).then(function (res) {
                                                    _this2.setAccessToTabsByStatus(res.data.status);
                                                    _this2.setState({ entity: res.data });
                                                    _this2.setState({ activeTab: "personalData" });
                                                    _this2.props.stopLoading();
                                                    console.log("input entity: ");
                                                    console.log(res.data);
                                                }).catch(function (error) {
                                                    _this2.props.showNetworkErrorMessage(error, getEntityOperation);
                                                    _this2.props.stopLoading();
                                                }));

                                            case 3:
                                            case 'end':
                                                return _context.stop();
                                        }
                                    }
                                }, null, _this2);
                            };

                            _context2.next = 3;
                            return regeneratorRuntime.awrap(getEntityOperation());

                        case 3:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.hidden === false && this.props.hidden === true && nextProps.relatedEntity.operationCanceled === false) {
                this.setState({ shouldActualizeRelatedEntities: true });
            }
        }
    }, {
        key: 'setAccessToTabsByStatus',
        value: function setAccessToTabsByStatus(status) {
            var tabsMap = {
                "personalData": _PersonalDataTab2.default,
                "address": _AddressTab2.default
            };
            var tabsNamesMap = {
                "personalData": "Personal data",
                "address": "Address"
            };
            if (status === "ORGANIZER" || status === "ACCEPTED") {
                tabsMap["player"] = _PlayerTab2.default;
                tabsNamesMap["player"] = "Participant data";
            }
            if (status === "ORGANIZER") {
                tabsMap["organizer"] = _OrganizerTab2.default;
                tabsNamesMap["organizer"] = "Organizer data";
            }
            this.setState({ tabsMap: tabsMap });
            this.setState({ tabsNamesMap: tabsNamesMap });
        }
    }, {
        key: 'setActiveTab',
        value: function setActiveTab(activeTabName) {
            this.setState({ activeTab: activeTabName });
        }
    }, {
        key: 'isTabActive',
        value: function isTabActive(activeTabName) {
            return this.state.activeTab === activeTabName ? _BaseColours2.default.border.bottom : _BaseColours2.default.background.darkBrown;
        }
    }, {
        key: 'shouldActualizeRelatedEntitiesCallBack',
        value: function shouldActualizeRelatedEntitiesCallBack() {
            this.setState({ shouldActualizeRelatedEntities: false });
        }
    }, {
        key: 'createContent',
        value: function createContent() {
            if (this.state.activeTab === "organizer" || this.state.activeTab === "player") return _react2.default.createElement(this.state.tabsMap[this.state.activeTab], {
                shouldActualizeRelatedEntities: this.state.shouldActualizeRelatedEntities,
                shouldActualizeRelatedEntitiesCallBack: this.shouldActualizeRelatedEntitiesCallBack.bind(this),
                width: this.props.dimension.width,
                height: this.props.dimension.height,
                orientation: this.props.dimension.orientation,
                navigate: this.props.navigate,
                entity: this.state.entity,
                inputsDisabled: this.props.mode === 'get' || !this.state.entity.canCurrentUserEdit,
                changeEntity: this.changeEntity.bind(this),
                validationErrors: this.state.validationErrors,
                relatedEntity: this.props.relatedEntity,
                hidden: this.props.hidden
            }, null);else if (this.state.activeTab !== "") return _react2.default.createElement(this.state.tabsMap[this.state.activeTab], {
                width: this.props.dimension.width,
                height: this.props.dimension.height,
                orientation: this.props.dimension.orientation,
                entity: this.state.entity,
                inputsDisabled: this.props.mode === 'get',
                changeEntity: this.changeEntity.bind(this),
                validationErrors: this.state.validationErrors
            }, null);else return _react2.default.createElement(_reactNative.View, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 182
                }
            });
        }
    }, {
        key: 'changeEntity',
        value: function changeEntity(fieldName, value) {
            var entity = this.state.entity;
            entity[fieldName] = value;
            this.setState({ entity: entity });
        }
    }, {
        key: 'sendEntity',
        value: function sendEntity() {
            var _this3 = this;

            var entityToSend = JSON.parse(JSON.stringify(this.state.entity));
            delete entityToSend["status"];
            delete entityToSend["points"];
            delete entityToSend["numberOfBattles"];
            delete entityToSend["finishedParticipatedTournaments"];
            delete entityToSend["finishedOrganizedTournaments"];
            delete entityToSend["finishedOrganizedTournaments"];
            delete entityToSend["createdGames"];
            delete entityToSend["banned"];
            delete entityToSend["canCurrentUserEdit"];
            console.log("entity");
            console.log(entityToSend);
            var validationErrors = (0, _UserValidator2.default)(entityToSend);
            if ((0, _checkIfObjectIsNotEmpty2.default)(validationErrors)) {
                console.log("output entity:");
                console.log(entityToSend);
                var sendEntityOperation = function sendEntityOperation() {
                    _this3.props.startLoading("Sending data...");
                    _axios2.default.post(_serverName.serverName + _this3.props.mode + '/user', entityToSend, {
                        headers: {
                            "X-Auth-Token": _this3.props.security.token
                        }
                    }).then(function (res) {
                        _this3.props.stopLoading();
                        _this3.setAccessToTabsByStatus(res.data.status);
                        _this3.setState({ entity: res.data });
                        if (res.data.newToken !== "") {
                            _this3.loginUserWithChangedUsername(res.data.newToken);
                        }
                        _this3.props.showSuccessMessage("User: " + res.data.name + " successfully " + _this3.props.mode + "ed");
                        _this3.props.disable();
                    }).catch(function (error) {
                        _this3.props.stopLoading();
                        if (error.response.data.fieldErrors === undefined) {
                            _this3.props.showNetworkErrorMessage(error, sendEntityOperation);
                        } else {
                            _this3.setValidationErrors(error.response.data);
                        }
                    });
                };

                sendEntityOperation();
            } else {
                var entity = this.state.entity;
                entity.canCurrentUserEdit = true;
                this.setState({ entity: entity });
                this.setValidationErrors(validationErrors);
            }
        }
    }, {
        key: 'loginUserWithChangedUsername',
        value: function loginUserWithChangedUsername(token) {
            this.props.setTokenAndRole(token, this.props.security.role);
            var date = new Date();
            db.transaction(function (tx) {
                tx.executeSql('select * from tokens2 where id=1', [], function (ts, result) {
                    console.log("result array: ");
                    var rows = result.rows._array;
                    console.log(JSON.stringify(rows));
                    if (rows.length !== 0) {
                        tx.executeSql('update tokens2 set token = ? ,date = ? where id = 1;', [token, date], function (ts, success) {
                            return console.log(success);
                        }, function (ts, error) {
                            console.log("error: ");
                            console.log(error);
                        });
                    }
                }, function (ts, error) {
                    console.log("error: ");
                    console.log(error);
                });
            });
        }
    }, {
        key: 'setValidationErrors',
        value: function setValidationErrors(validationException) {
            this.props.showFailureMessage(validationException.message);
            var validationErrors = validationException.fieldErrors;
            console.log("validation errors:");
            console.log(validationErrors);
            var validationErrorsState = this.state.validationErrors;
            for (var field in validationErrorsState) {
                if (validationErrors.hasOwnProperty(field)) {
                    validationErrorsState[field] = validationErrors[field];
                } else {
                    validationErrorsState[field] = "";
                }
            }
            this.setState({ validationErrors: validationErrorsState });
        }
    }, {
        key: 'createButtons',
        value: function createButtons() {
            var _this4 = this;

            if (this.props.mode !== 'get' && this.state.entity.canCurrentUserEdit) {
                return [_react2.default.createElement(
                    _reactNative.TouchableHighlight,
                    { key: 'save', style: [_EntityPanelStyle2.default.button, { backgroundColor: _BaseColours2.default.misc.deepRed }], onPress: function onPress() {
                            return _this4.sendEntity();
                        }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 301
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 302
                            }
                        },
                        'Save'
                    )
                ), _react2.default.createElement(
                    _reactNative.TouchableHighlight,
                    { key: 'close', style: [_EntityPanelStyle2.default.button, { backgroundColor: _BaseColours2.default.misc.deepRed }], onPress: function onPress() {
                            return _this4.props.disable();
                        }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 304
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 305
                            }
                        },
                        'Close'
                    )
                )];
            } else {
                return [_react2.default.createElement(
                    _reactNative.TouchableHighlight,
                    { key: 'ok', style: [_EntityPanelStyle2.default.button, { backgroundColor: _BaseColours2.default.misc.deepRed }], onPress: function onPress() {
                            return _this4.props.disable();
                        }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 311
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 312
                            }
                        },
                        'Ok'
                    )
                )];
            }
        }
    }, {
        key: 'calculatePanelHeight',
        value: function calculatePanelHeight() {
            return this.props.dimension.orientation === 'portrait' ? this.props.dimension.height * 0.80 : this.props.dimension.height * 0.77;
        }
    }, {
        key: 'render',
        value: function render() {
            var content = this.createContent();
            var buttons = this.createButtons();

            return _react2.default.createElement(
                _reactNativeModal2.default,
                { isVisible: !this.props.hidden, backdropOpacity: 0.3, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 328
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_EntityPanelStyle2.default.modal, {
                            width: this.props.dimension.width * 0.9,
                            height: this.calculatePanelHeight()
                        }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 329
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_EntityPanelStyle2.default.title, { alignItems: 'center' }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 333
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [_MainStyles2.default.textStyle, { fontSize: 22 }], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 334
                                }
                            },
                            this.props.mode.charAt(0).toUpperCase() + this.props.mode.slice(1) + " user"
                        )
                    ),
                    _react2.default.createElement(_Navigation2.default, {
                        orientation: this.props.dimension.orientation,
                        tabsNamesMap: this.state.tabsNamesMap,
                        setActiveTab: this.setActiveTab.bind(this),
                        isTabActive: this.isTabActive.bind(this), __source: {
                            fileName: _jsxFileName,
                            lineNumber: 338
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_EntityPanelStyle2.default.formWindow], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 343
                            }
                        },
                        content
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: _EntityPanelStyle2.default.buttonRow, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 346
                            }
                        },
                        buttons
                    )
                )
            );
        }
    }]);
    return Panel;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_index.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        dimension: state.dimension,
        security: state.security
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Panel);