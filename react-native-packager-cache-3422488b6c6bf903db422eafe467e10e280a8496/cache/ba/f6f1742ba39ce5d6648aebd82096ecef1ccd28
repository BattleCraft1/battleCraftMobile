'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePickerComponent = undefined;
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/node_modules/react-native-form-generator/src/lib/DatePickerComponent.android.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _Field = require('./Field');

var regeneratorRuntime = require('regenerator-runtime');

var _require = require('react-native'),
    View = _require.View,
    StyleSheet = _require.StyleSheet,
    TextInput = _require.TextInput,
    Text = _require.Text,
    DatePickerAndroid = _require.DatePickerAndroid;

var DatePickerComponent = exports.DatePickerComponent = function (_React$Component) {
  babelHelpers.inherits(DatePickerComponent, _React$Component);

  function DatePickerComponent(props) {
    babelHelpers.classCallCheck(this, DatePickerComponent);

    var _this = babelHelpers.possibleConstructorReturn(this, (DatePickerComponent.__proto__ || Object.getPrototypeOf(DatePickerComponent)).call(this, props));

    _this.state = {
      date: props.date ? new Date(props.date) : '',
      isPickerVisible: false
    };

    return _this;
  }

  babelHelpers.createClass(DatePickerComponent, [{
    key: 'handleLayoutChange',
    value: function handleLayoutChange(e) {
      var _e$nativeEvent$layout = babelHelpers.extends({}, e.nativeEvent.layout),
          x = _e$nativeEvent$layout.x,
          y = _e$nativeEvent$layout.y,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;

      this.setState(e.nativeEvent.layout);
    }
  }, {
    key: 'handleValueChange',
    value: function handleValueChange(date) {

      this.setState({ date: date });

      if (this.props.onChange) this.props.onChange(this.props.prettyPrint ? this.props.dateTimeFormat(date) : date);
      if (this.props.onValueChange) this.props.onValueChange(date);
    }
  }, {
    key: 'setDate',
    value: function setDate(date) {
      this.setState({ date: date });
      if (this.props.onChange) this.props.onChange(this.props.prettyPrint ? this.props.dateTimeFormat(date) : date);
      if (this.props.onValueChange) this.props.onValueChange(date);
    }
  }, {
    key: '_togglePicker',
    value: function _togglePicker(event) {
      var _ref, action, year, month, day, code, message;

      return regeneratorRuntime.async(function _togglePicker$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return regeneratorRuntime.awrap(DatePickerAndroid.open({
                date: this.props.date || new Date()
              }));

            case 3:
              _ref = _context.sent;
              action = _ref.action;
              year = _ref.year;
              month = _ref.month;
              day = _ref.day;

              if (action !== DatePickerAndroid.dismissedAction) {
                this.handleValueChange(new Date(year, month, day));
              }
              _context.next = 16;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context['catch'](0);
              code = _context.t0.code;
              message = _context.t0.message;

              console.warn('Cannot open time picker', message);

            case 16:
              this.props.onPress && this.props.onPress(event);

            case 17:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this, [[0, 11]]);
    }
  }, {
    key: 'render',
    value: function render() {
      var placeholderComponent = this.props.placeholderComponent ? this.props.placeholderComponent : _react2.default.createElement(
        Text,
        { style: [formStyles.fieldText, this.props.placeholderStyle], __source: {
            fileName: _jsxFileName,
            lineNumber: 62
          }
        },
        this.props.placeholder
      );
      return _react2.default.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 63
          }
        },
        _react2.default.createElement(
          _Field.Field,
          babelHelpers.extends({}, this.props, {
            ref: 'inputBox',
            onPress: this._togglePicker.bind(this), __source: {
              fileName: _jsxFileName,
              lineNumber: 63
            }
          }),
          _react2.default.createElement(
            View,
            { style: [formStyles.fieldContainer, formStyles.horizontalContainer, this.props.containerStyle],
              onLayout: this.handleLayoutChange.bind(this), __source: {
                fileName: _jsxFileName,
                lineNumber: 67
              }
            },
            placeholderComponent,
            _react2.default.createElement(
              View,
              { style: [formStyles.alignRight, formStyles.horizontalContainer], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 73
                }
              },
              _react2.default.createElement(
                Text,
                { style: [formStyles.fieldValue, this.props.valueStyle], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 74
                  }
                },
                this.state.date ? this.state.date.toLocaleDateString() : ""
              )
            )
          )
        ),
        this.state.isPickerVisible ? _react2.default.createElement(DatePickerAndroid, babelHelpers.extends({}, this.props, {
          date: this.state.date || new Date(),

          onDateChange: this.handleValueChange.bind(this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 84
          }
        })) : null
      );
    }
  }]);
  return DatePickerComponent;
}(_react2.default.Component);

DatePickerComponent.propTypes = {
  dateTimeFormat: _react2.default.PropTypes.func
};

DatePickerComponent.defaultProps = {
  dateTimeFormat: function dateTimeFormat(date) {
    if (!date) return "";
    return date.toLocaleDateString();
  }
};

var formStyles = StyleSheet.create({
  form: {},
  alignRight: {
    marginTop: 7, position: 'absolute', right: 10
  },
  noBorder: {
    borderTopWidth: 0,
    borderBottomWidth: 0
  },
  separatorContainer: {
    paddingTop: 35,
    borderBottomColor: '#C8C7CC',
    borderBottomWidth: 1

  },
  separator: {

    paddingLeft: 10,
    paddingRight: 10,
    color: '#6D6D72',
    paddingBottom: 7

  },
  fieldsWrapper: {},
  horizontalContainer: {
    flexDirection: 'row',

    justifyContent: 'flex-start'
  },
  fieldContainer: {
    borderBottomWidth: 1,
    borderBottomColor: '#C8C7CC',
    backgroundColor: 'white',
    justifyContent: 'center',
    height: 45
  },
  fieldValue: {
    fontSize: 34 / 2,
    paddingLeft: 10,
    paddingRight: 10,
    marginRight: 10,
    paddingTop: 4,
    justifyContent: 'center',

    color: '#C7C7CC'
  },
  fieldText: {
    fontSize: 34 / 2,
    paddingLeft: 10,
    paddingRight: 10,
    justifyContent: 'center',
    lineHeight: 32
  },
  input: {
    paddingLeft: 10,
    paddingRight: 10

  },
  helpTextContainer: {
    marginTop: 9,
    marginBottom: 25,
    paddingLeft: 20,
    paddingRight: 20

  },
  helpText: {
    color: '#7a7a7a'
  }
});