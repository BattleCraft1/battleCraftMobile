Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/collectionPanel/table/rows/game/Rows.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _Checkbox = require('../../../../commonComponents/checkBox/Checkbox');

var _Checkbox2 = babelHelpers.interopRequireDefault(_Checkbox);

var _MultiCheckbox = require('../../../../commonComponents/checkBox/MultiCheckbox');

var _MultiCheckbox2 = babelHelpers.interopRequireDefault(_MultiCheckbox);

var _ListColours = require('../../../../../main/consts/ListColours');

var _ListColours2 = babelHelpers.interopRequireDefault(_ListColours);

var _TableStyles = require('../../../../../Styles/CollectionPanelStyles/TableStyles');

var _TableStyles2 = babelHelpers.interopRequireDefault(_TableStyles);

var _MainStyles = require('../../../../../Styles/UniversalStyles/MainStyles');

var _MainStyles2 = babelHelpers.interopRequireDefault(_MainStyles);

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _actions = require('../../../../../redux/actions');

var _dateformat = require('dateformat');

var _dateformat2 = babelHelpers.interopRequireDefault(_dateformat);

var _serverName = require('../../../../../main/consts/serverName');

var _expo = require('expo');

var regeneratorRuntime = require('regenerator-runtime');

var Rows = function (_Component) {
    babelHelpers.inherits(Rows, _Component);

    function Rows(props) {
        babelHelpers.classCallCheck(this, Rows);

        var _this = babelHelpers.possibleConstructorReturn(this, (Rows.__proto__ || Object.getPrototypeOf(Rows)).call(this, props));

        _this.renderRow = _this.renderRow.bind(_this);
        return _this;
    }

    babelHelpers.createClass(Rows, [{
        key: 'downloadGameRules',
        value: function downloadGameRules(gameName) {
            var _this2 = this;

            var URL, fileName, directory, downloadGameRulesOperation;
            return regeneratorRuntime.async(function downloadGameRules$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            URL = _serverName.serverName + ('/get/game/rules?gameName=' + gameName);
                            fileName = gameName + '.pdf';
                            directory = _expo.FileSystem.documentDirectory + fileName;

                            downloadGameRulesOperation = function downloadGameRulesOperation() {
                                return regeneratorRuntime.async(function downloadGameRulesOperation$(_context3) {
                                    while (1) {
                                        switch (_context3.prev = _context3.next) {
                                            case 0:
                                                _this2.props.startLoading("Downloading game rules...");
                                                _context3.next = 3;
                                                return regeneratorRuntime.awrap(_expo.FileSystem.downloadAsync(_serverName.serverName, directory).then(function _callee(response) {
                                                    return regeneratorRuntime.async(function _callee$(_context) {
                                                        while (1) {
                                                            switch (_context.prev = _context.next) {
                                                                case 0:
                                                                    _this2.props.stopLoading();
                                                                    _this2.props.showSuccessMessage("file saved in: " + directory);

                                                                case 2:
                                                                case 'end':
                                                                    return _context.stop();
                                                            }
                                                        }
                                                    }, null, _this2);
                                                }).catch(function _callee2(error) {
                                                    return regeneratorRuntime.async(function _callee2$(_context2) {
                                                        while (1) {
                                                            switch (_context2.prev = _context2.next) {
                                                                case 0:
                                                                    _this2.props.stopLoading();
                                                                    _context2.next = 3;
                                                                    return regeneratorRuntime.awrap(_this2.props.showNetworkErrorMessage(error, downloadGameRulesOperation));

                                                                case 3:
                                                                case 'end':
                                                                    return _context2.stop();
                                                            }
                                                        }
                                                    }, null, _this2);
                                                }));

                                            case 3:
                                            case 'end':
                                                return _context3.stop();
                                        }
                                    }
                                }, null, _this2);
                            };

                            _context4.next = 6;
                            return regeneratorRuntime.awrap(downloadGameRulesOperation());

                        case 6:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'printStatus',
        value: function printStatus(data) {
            if (data.banned === true) return "banned";else if (data.status !== undefined) return data.status.toLowerCase().split('_').join(' ');else return "";
        }
    }, {
        key: 'backgroundColourCheck',
        value: function backgroundColourCheck(rowData) {
            switch (this.printStatus(rowData)) {
                case 'new':
                    return _ListColours2.default.games.NEW;
                case 'accepted':
                    return _ListColours2.default.games.ACCEPTED;
                case 'banned':
                    return _ListColours2.default.games.BANNED;
                default:
                    return _ListColours2.default.games.NEW;
            }
        }
    }, {
        key: 'createGamesList',
        value: function createGamesList() {
            var _this3 = this;

            if (this.props.content.length === 0) {
                return _react2.default.createElement(
                    _reactNative.View,
                    { style: [_TableStyles2.default.row], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 76
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { numberOfLines: 1, style: [_MainStyles2.default.smallWhiteStyle], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 76
                            }
                        },
                        'Empty'
                    )
                );
            } else {
                return this.props.content.map(function (game) {
                    return _this3.renderRow(game);
                });
            }
        }
    }, {
        key: 'editEntity',
        value: function editEntity(element) {
            this.props.editEntity("game", element.name);
        }
    }, {
        key: 'renderRow',
        value: function renderRow(rowData) {
            var _this4 = this;

            var backgroundColour = this.backgroundColourCheck(rowData);

            return _react2.default.createElement(
                _reactNative.View,
                { key: rowData.name, style: [_TableStyles2.default.row], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 91
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_TableStyles2.default.sectionHeader], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 92
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableHighlight,
                        {
                            style: { flex: 1 },
                            onPress: function onPress() {
                                return _this4.editEntity(rowData);
                            }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 93
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { numberOfLines: 1, style: [_MainStyles2.default.smallWhiteStyle, { fontSize: 20 }], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 96
                                }
                            },
                            ' ',
                            rowData.name
                        )
                    ),
                    _react2.default.createElement(_Checkbox2.default, { element: rowData, checked: rowData.checked, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 98
                        }
                    })
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_TableStyles2.default.row], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 100
                        }
                    },
                    _react2.default.createElement(_reactNative.Button, { onPress: function _callee3() {
                            return regeneratorRuntime.async(function _callee3$(_context5) {
                                while (1) {
                                    switch (_context5.prev = _context5.next) {
                                        case 0:
                                            _context5.next = 2;
                                            return regeneratorRuntime.awrap(_this4.downloadGameRules(rowData.name));

                                        case 2:
                                            return _context5.abrupt('return', _context5.sent);

                                        case 3:
                                        case 'end':
                                            return _context5.stop();
                                    }
                                }
                            }, null, _this4);
                        }, title: "Download rules", color: '#4b371b', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 101
                        }
                    })
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_TableStyles2.default.row], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 103
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { numberOfLines: 1, style: [_MainStyles2.default.smallWhiteStyle], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 104
                            }
                        },
                        ' Tournaments number: ',
                        rowData.tournamentsNumber
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_TableStyles2.default.row], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 106
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { numberOfLines: 1, style: [_MainStyles2.default.smallWhiteStyle], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 107
                            }
                        },
                        ' Creation date: ',
                        (0, _dateformat2.default)(rowData.dateOfStart, "dd-MM-yyyy hh:mm")
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_TableStyles2.default.row, { backgroundColor: backgroundColour }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 109
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { numberOfLines: 1, style: [_MainStyles2.default.smallWhiteStyle], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 110
                            }
                        },
                        ' Status: ',
                        this.printStatus(rowData)
                    )
                )
            );
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _reactNative.ScrollView,
                { styles: _TableStyles2.default.table, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 117
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: _TableStyles2.default.header, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 118
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [_MainStyles2.default.textStyle, { fontSize: 24 }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 119
                            }
                        },
                        'Games'
                    ),
                    _react2.default.createElement(_MultiCheckbox2.default, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 120
                        }
                    })
                ),
                this.createGamesList()
            );
        }
    }]);
    return Rows;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_actions.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        message: state.message,
        loading: state.loading,
        page: state.page
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Rows);