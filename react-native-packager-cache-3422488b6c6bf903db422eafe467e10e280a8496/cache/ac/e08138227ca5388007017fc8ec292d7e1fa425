Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/account/NoAuthPanel/RegisterPopup/RegisterPopup.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNativeModal = require('react-native-modal');

var _reactNativeModal2 = babelHelpers.interopRequireDefault(_reactNativeModal);

var _MainStyles = require('../../../../Styles/UniversalStyles/MainStyles');

var _MainStyles2 = babelHelpers.interopRequireDefault(_MainStyles);

var _EntityPanelStyle = require('../../../../Styles/CollectionPanelStyles/EntityPanelStyle');

var _EntityPanelStyle2 = babelHelpers.interopRequireDefault(_EntityPanelStyle);

var _PersonalDataTab = require('./tabs/PersonalDataTab');

var _PersonalDataTab2 = babelHelpers.interopRequireDefault(_PersonalDataTab);

var _AddressTab = require('./tabs/AddressTab');

var _AddressTab2 = babelHelpers.interopRequireDefault(_AddressTab);

var _ResendMailTab = require('./tabs/ResendMailTab');

var _ResendMailTab2 = babelHelpers.interopRequireDefault(_ResendMailTab);

var _Navigation = require('./navigation/Navigation');

var _Navigation2 = babelHelpers.interopRequireDefault(_Navigation);

var _BaseColours = require('battleCraftMobile/App/main/consts/BaseColours');

var _BaseColours2 = babelHelpers.interopRequireDefault(_BaseColours);

var _index = require('../../../../redux/actions/index');

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _serverName = require('../../../../main/consts/serverName');

var _axios = require('axios');

var _axios2 = babelHelpers.interopRequireDefault(_axios);

var _checkIfObjectIsNotEmpty = require('../../../../main/functions/checkIfObjectIsNotEmpty');

var _checkIfObjectIsNotEmpty2 = babelHelpers.interopRequireDefault(_checkIfObjectIsNotEmpty);

var _RegisterValidator = require('./validator/RegisterValidator');

var _RegisterValidator2 = babelHelpers.interopRequireDefault(_RegisterValidator);

var tabsMap = {
    "personalData": _PersonalDataTab2.default,
    "address": _AddressTab2.default,
    "resendMail": _ResendMailTab2.default
};

var tabsNamesMap = {
    "personalData": "Personal data",
    "address": "Address",
    "resendMail": "Resend Mail"
};

var Panel = function (_Component) {
    babelHelpers.inherits(Panel, _Component);

    function Panel(props) {
        babelHelpers.classCallCheck(this, Panel);

        var _this = babelHelpers.possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));

        _this.state = {
            activeTab: "personalData",
            entity: {
                "name": "",
                "nameChange": "",
                "email": "",
                "password": "",
                "passwordConfirm": "",
                "firstname": "",
                "lastname": "",
                "phoneNumber": "",
                "province": "lubelskie",
                "city": "",
                "street": "",
                "zipCode": "",
                "description": ""
            },
            validationErrors: {
                "name": "",
                "nameChange": "",
                "email": "",
                "password": "",
                "passwordConfirm": "",
                "firstname": "",
                "lastname": "",
                "phoneNumber": "",
                "province": "",
                "city": "",
                "street": "",
                "zipCode": "",
                "description": ""
            }
        };
        return _this;
    }

    babelHelpers.createClass(Panel, [{
        key: 'setActiveTab',
        value: function setActiveTab(activeTabName) {
            this.setState({ activeTab: activeTabName });
        }
    }, {
        key: 'isTabActive',
        value: function isTabActive(activeTabName) {
            return this.state.activeTab === activeTabName ? _BaseColours2.default.border.bottom : _BaseColours2.default.background.darkBrown;
        }
    }, {
        key: 'createContent',
        value: function createContent() {
            return _react2.default.createElement(tabsMap[this.state.activeTab], {
                width: this.props.dimension.width,
                height: this.props.dimension.height,
                orientation: this.props.dimension.orientation,
                entity: this.state.entity,
                disable: this.props.disable,
                changeEntity: this.changeEntity.bind(this),
                validationErrors: this.state.validationErrors
            }, null);
        }
    }, {
        key: 'changeEntity',
        value: function changeEntity(fieldName, value) {
            var entity = this.state.entity;
            entity[fieldName] = value;
            this.setState({ entity: entity });
        }
    }, {
        key: 'sendEntity',
        value: function sendEntity() {
            var _this2 = this;

            var entityToSend = JSON.parse(JSON.stringify(this.state.entity));
            console.log("entity");
            console.log(entityToSend);
            entityToSend.name = this.state.entity.nameChange;
            var validationErrors = (0, _RegisterValidator2.default)(entityToSend);
            if ((0, _checkIfObjectIsNotEmpty2.default)(validationErrors)) {
                console.log("output entity:");
                console.log(entityToSend);
                this.props.startLoading("Registering user...");
                var url = void 0;
                var config = void 0;
                if (this.props.userKind === "normal") {
                    url = 'registration';
                    config = {};
                } else {
                    url = '/create/admin';
                    config = {
                        headers: {
                            "X-Auth-Token": this.props.security.token
                        }
                    };
                }
                var registerOperation = function registerOperation() {
                    _this2.props.startLoading("Registering account...");
                    _axios2.default.post(_serverName.serverName + url, entityToSend, config).then(function (res) {
                        _this2.props.stopLoading();
                        if (_this2.props.userKind === "normal") {
                            _this2.props.showSuccessMessage("You are successfully registered. Please check your mail box to verify you account. If you do not have any mail from us please try to rensend mail.");
                        } else {
                            _this2.props.showSuccessMessage("Admin account is created");
                        }
                        _this2.props.disable();
                    }).catch(function (error) {
                        _this2.props.stopLoading();
                        if (error.response.data.fieldErrors === undefined) {
                            _this2.props.showNetworkErrorMessage(error, registerOperation);
                        } else {
                            _this2.setValidationErrors(error.response.data);
                        }
                    });
                };

                registerOperation();
            } else {
                this.setValidationErrors(validationErrors);
            }
        }
    }, {
        key: 'setValidationErrors',
        value: function setValidationErrors(validationException) {
            this.props.showFailureMessage(validationException.message);
            var validationErrors = validationException.fieldErrors;
            console.log("validation errors:");
            console.log(validationErrors);
            var validationErrorsState = this.state.validationErrors;
            for (var field in validationErrorsState) {
                if (validationErrors.hasOwnProperty(field)) {
                    validationErrorsState[field] = validationErrors[field];
                } else {
                    validationErrorsState[field] = "";
                }
            }
            this.setState({ validationErrors: validationErrorsState });
        }
    }, {
        key: 'calculatePanelHeight',
        value: function calculatePanelHeight() {
            return this.props.dimension.orientation === 'portrait' ? this.props.dimension.height * 0.85 : this.props.dimension.height * 0.77;
        }
    }, {
        key: 'createTitle',
        value: function createTitle() {
            if (this.props.userKind === "normal") {
                return 'Registration';
            } else {
                return 'Create administrator';
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(
                _reactNativeModal2.default,
                { isVisible: !this.props.hidden, backdropOpacity: 0.3, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 200
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [_EntityPanelStyle2.default.modal, {
                            width: this.props.dimension.width * 0.9,
                            height: this.calculatePanelHeight()
                        }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 201
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_EntityPanelStyle2.default.title, { alignItems: 'center' }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 205
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [_MainStyles2.default.textStyle, { fontSize: 22 }], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 206
                                }
                            },
                            this.createTitle()
                        )
                    ),
                    _react2.default.createElement(_Navigation2.default, {
                        userKind: this.props.userKind,
                        orientation: this.props.dimension.orientation,
                        tabsNamesMap: tabsNamesMap,
                        setActiveTab: this.setActiveTab.bind(this),
                        isTabActive: this.isTabActive.bind(this), __source: {
                            fileName: _jsxFileName,
                            lineNumber: 208
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_EntityPanelStyle2.default.formWindow], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 214
                            }
                        },
                        this.createContent()
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: _EntityPanelStyle2.default.buttonRow, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 217
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableHighlight,
                            { key: 'save', style: [_EntityPanelStyle2.default.button, { backgroundColor: _BaseColours2.default.misc.deepRed }], onPress: function onPress() {
                                    return _this3.sendEntity();
                                }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 218
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 219
                                    }
                                },
                                'Save'
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.TouchableHighlight,
                            { key: 'close', style: [_EntityPanelStyle2.default.button, { backgroundColor: _BaseColours2.default.misc.deepRed }], onPress: function onPress() {
                                    return _this3.props.disable();
                                }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 221
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: _MainStyles2.default.bigWhiteStyle, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 222
                                    }
                                },
                                'Close'
                            )
                        )
                    )
                )
            );
        }
    }]);
    return Panel;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_index.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        dimension: state.dimension,
        security: state.security
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Panel);