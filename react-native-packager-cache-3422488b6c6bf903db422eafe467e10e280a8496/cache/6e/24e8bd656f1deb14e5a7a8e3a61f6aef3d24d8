Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/commonComponents/checkBox/MultiCheckbox.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _index = require('../../../redux/actions/index');

var _reactNativeCheckBox = require('react-native-check-box');

var _reactNativeCheckBox2 = babelHelpers.interopRequireDefault(_reactNativeCheckBox);

var MultiCheckbox = function (_React$Component) {
    babelHelpers.inherits(MultiCheckbox, _React$Component);

    function MultiCheckbox(props) {
        babelHelpers.classCallCheck(this, MultiCheckbox);

        var _this = babelHelpers.possibleConstructorReturn(this, (MultiCheckbox.__proto__ || Object.getPrototypeOf(MultiCheckbox)).call(this, props));

        _this.state = {
            checked: false
        };
        return _this;
    }

    babelHelpers.createClass(MultiCheckbox, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.page.content.length === 0) {
                this.setState({ checked: false });
                return;
            }
            var uncheckedElements = this.props.page.content.filter(function (element) {
                return element.checked === false;
            });
            if (uncheckedElements.length > 0) this.setState({ checked: false });else this.setState({ checked: true });
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.page !== undefined && nextProps.page !== this.props.page) {
                var uncheckedElements = nextProps.page.content.filter(function (element) {
                    return element.checked === false;
                });
                if (uncheckedElements.length > 0) this.setState({ checked: false });else this.setState({ checked: true });
            }
        }
    }, {
        key: 'changeRelatedEntities',
        value: function changeRelatedEntities(checked) {
            var _this2 = this;

            var relatedEntities = this.props.entityPanel.relatedEntity.relatedEntities;
            if (!checked || this.props.entityPanel.relatedEntity.relatedEntityLimit >= relatedEntities.length + this.props.page.content.length) {
                if (this.props.entityPanel.relatedEntity.relatedEntityType === "participatedTournaments") {
                    this.props.checkAllElements(this.props.element.name, checked);
                    this.setState({ checked: checked });
                    if (checked) {
                        relatedEntities.concat(this.props.page.checkedElementsNames.map(function (checkedElement) {
                            return {
                                name: checkedElement.name,
                                playersOnTableCount: checkedElement.playersOnTableCount
                            };
                        }));
                    } else {
                        relatedEntities = relatedEntities.filter(function (relatedEntity) {
                            return _this2.props.page.checkedElementsNames.contains(relatedEntity.name);
                        });
                    }
                    this.props.changeRelatedEntities(relatedEntities);
                } else {
                    this.setState({ checked: checked });
                    this.props.checkAllElements(checked);
                    if (checked) {
                        relatedEntities = relatedEntities.concat(this.props.page.checkedElementsNames);
                    } else {
                        relatedEntities = relatedEntities.diff(this.props.page.checkedElementsNames);
                    }
                    this.props.changeRelatedEntities(relatedEntities);
                }
            } else {
                this.props.showFailureMessage("You can choose only " + this.props.entityPanel.relatedEntity.relatedEntityLimit + " elements");
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(_reactNativeCheckBox2.default, {
                style: { padding: 10 },
                isChecked: this.state.checked,
                onClick: function onClick() {
                    var checked = _this3.state.checked;
                    checked = !checked;
                    if (_this3.props.entityPanel.mode !== 'disabled') {
                        _this3.changeRelatedEntities(checked);
                    } else {
                        _this3.props.checkAllElements(checked);
                        _this3.setState({ checked: checked });
                    }
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            });
        }
    }]);
    return MultiCheckbox;
}(_react2.default.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_index.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        entityPanel: state.entityPanel,
        page: state.page
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(MultiCheckbox);