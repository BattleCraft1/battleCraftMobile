Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/entityPanel/inputs/GameRulesInput.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _expo = require('expo');

var _expo2 = babelHelpers.interopRequireDefault(_expo);

var regeneratorRuntime = require('regenerator-runtime');

var GameRulesInput = function (_React$Component) {
    babelHelpers.inherits(GameRulesInput, _React$Component);

    function GameRulesInput() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, GameRulesInput);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = GameRulesInput.__proto__ || Object.getPrototypeOf(GameRulesInput)).call.apply(_ref, [this].concat(args))), _this), _this.uploadGameRules = function _callee() {
            var pickerResult;
            return regeneratorRuntime.async(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return regeneratorRuntime.awrap(_expo.DocumentPicker.getDocumentAsync({
                                type: 'application/pdf'
                            }));

                        case 2:
                            pickerResult = _context.sent;

                            if (!pickerResult.cancelled) {
                                _this.props.changeEntity(_this.props.fieldName, pickerResult.uri);
                            }

                        case 4:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, null, _this2);
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(GameRulesInput, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _reactNative.View,
                { style: { marginTop: 10 }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 21
                    }
                },
                _react2.default.createElement(_reactNative.Button, {
                    title: 'Upload Rules',
                    color: '#4b371b',
                    onPress: this.uploadGameRules,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 22
                    }
                })
            );
        }
    }]);
    return GameRulesInput;
}(_react2.default.Component);

exports.default = GameRulesInput;