Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/collectionPanel/pagePanel/PagePanel.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNativeFormGenerator = require('react-native-form-generator');

var _MainStyles = require('../../../Styles/UniversalStyles/MainStyles');

var _MainStyles2 = babelHelpers.interopRequireDefault(_MainStyles);

var _SearchStyles = require('../../../Styles/CollectionPanelStyles/SearchStyles');

var _SearchStyles2 = babelHelpers.interopRequireDefault(_SearchStyles);

var _fieldsOfObject = require('../../../main/consts/fieldsOfObject');

var _kindsOfSort = require('../../../main/consts/kindsOfSort');

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _index = require('../../../redux/actions/index');

var PagePanel = function (_Component) {
    babelHelpers.inherits(PagePanel, _Component);

    function PagePanel(props) {
        babelHelpers.classCallCheck(this, PagePanel);

        var _this = babelHelpers.possibleConstructorReturn(this, (PagePanel.__proto__ || Object.getPrototypeOf(PagePanel)).call(this, props));

        _this.state = {
            pageFormData: {
                page: (_this.props.page.number + 1).toString(),
                size: _this.props.page.numberOfElements.toString(),
                property: _this.props.pageRequest.pageRequest.property,
                direction: _this.props.pageRequest.pageRequest.direction
            }
        };
        return _this;
    }

    babelHelpers.createClass(PagePanel, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.refs.pageForm.refs.page.setValue((this.props.page.number + 1).toString());
            this.refs.pageForm.refs.size.setValue(this.props.page.numberOfElements.toString());
            this.refs.pageForm.refs.property.setValue(this.props.pageRequest.pageRequest.property);
            this.refs.pageForm.refs.direction.setValue(this.props.pageRequest.pageRequest.direction);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.page !== undefined && nextProps.page !== this.props.page && nextProps.pageRequest !== undefined && nextProps.pageRequest !== this.props.pageRequest) {
                this.refs.pageForm.refs.page.setValue((nextProps.page.number + 1).toString());
                this.refs.pageForm.refs.size.setValue(nextProps.page.numberOfElements.toString());
                this.refs.pageForm.refs.property.setValue(nextProps.pageRequest.pageRequest.property);
                this.refs.pageForm.refs.direction.setValue(nextProps.pageRequest.pageRequest.direction);
            }
        }
    }, {
        key: 'handlePageFormChanges',
        value: function handlePageFormChanges(pageForm) {
            this.setState({
                pageFormData: pageForm
            });
        }
    }, {
        key: 'submitForm',
        value: function submitForm() {
            var number = parseInt(this.state.pageFormData.page) - 1;
            var size = parseInt(this.state.pageFormData.size);
            var property = this.state.pageFormData.property;
            var direction = this.state.pageFormData.direction;

            var validationErrors = [];

            if (isNaN(number)) {
                validationErrors.push("Page number must be numeric value");
            } else if (number < 0) {
                validationErrors.push("Page " + number + " don't exist");
            }

            if (isNaN(size)) {
                validationErrors.push("Page size must be numeric value");
            } else if (!(size <= 10 && size >= 1)) {
                validationErrors.push("Page size must be between 1 and 10");
            }

            if (!_fieldsOfObject.fieldsOfObjects[this.props.collectionType].hasOwnProperty(property)) {
                validationErrors.push("Sort field has not valid value");
            }

            if (!_kindsOfSort.kindOfSort.hasOwnProperty(direction)) {
                validationErrors.push("Sort type has not valid value");
            }

            if (validationErrors.length > 0) {
                this.props.showFailMessageBox(validationErrors.join('\r\n'));
                this.props.onClosePanel();
            } else {
                var pageRequest = this.props.pageRequest;
                pageRequest.pageRequest.size = size;
                pageRequest.pageRequest.page = number;
                pageRequest.pageRequest.property = property;
                pageRequest.pageRequest.direction = direction;
                this.props.setPageRequest(pageRequest);

                this.props.getPage(this.props.collectionType);

                this.props.onClosePanel();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _reactNative.View,
                { style: [_MainStyles2.default.contentStyle, _MainStyles2.default.stretch], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 122
                    }
                },
                _react2.default.createElement(
                    _reactNative.ScrollView,
                    { keyboardShouldPersistTaps: 'always', style: { paddingLeft: 10, paddingRight: 10 }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 123
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: _SearchStyles2.default.headerStyle, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 124
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [_MainStyles2.default.textStyle, { fontSize: 26 }], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 125
                                }
                            },
                            'Get page'
                        )
                    ),
                    _react2.default.createElement(
                        _reactNativeFormGenerator.Form,
                        {
                            ref: 'pageForm',
                            onChange: this.handlePageFormChanges.bind(this), __source: {
                                fileName: _jsxFileName,
                                lineNumber: 127
                            }
                        },
                        _react2.default.createElement(_reactNativeFormGenerator.InputField, {
                            ref: 'page',
                            keyboardType: 'numeric',
                            placeholder: 'Page number',
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 130
                            }
                        }),
                        _react2.default.createElement(_reactNativeFormGenerator.InputField, {
                            ref: 'size',
                            keyboardType: 'numeric',
                            placeholder: 'Page size',
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 135
                            }
                        }),
                        _react2.default.createElement(_reactNativeFormGenerator.PickerField, {
                            ref: 'property',
                            label: 'Sort by field:',
                            options: _fieldsOfObject.fieldsOfObjects[this.props.collectionType],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 140
                            }
                        }),
                        _react2.default.createElement(_reactNativeFormGenerator.PickerField, {
                            ref: 'direction',
                            label: 'Sort type:',
                            options: _kindsOfSort.kindOfSort,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 145
                            }
                        }),
                        _react2.default.createElement(_reactNative.Button, { title: 'Get page', color: '#4b371b', onPress: this.submitForm.bind(this), __source: {
                                fileName: _jsxFileName,
                                lineNumber: 150
                            }
                        })
                    )
                )
            );
        }
    }]);
    return PagePanel;
}(_react.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_index.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        page: state.page,
        pageRequest: state.pageRequest
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PagePanel);