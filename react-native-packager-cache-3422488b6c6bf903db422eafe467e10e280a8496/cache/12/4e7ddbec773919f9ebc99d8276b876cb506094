Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/entityPanel/tournament/tabs/table/ParticipantsGroupsTable.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _PartisipantsGroupTableRow = require('./row/PartisipantsGroupTableRow');

var _PartisipantsGroupTableRow2 = babelHelpers.interopRequireDefault(_PartisipantsGroupTableRow);

var _EmptyTournamentTableRow = require('../../../user/tabs/table/row/EmptyTournamentTableRow');

var _EmptyTournamentTableRow2 = babelHelpers.interopRequireDefault(_EmptyTournamentTableRow);

var ParticipantsGroupsTable = function (_React$Component) {
    babelHelpers.inherits(ParticipantsGroupsTable, _React$Component);

    function ParticipantsGroupsTable() {
        babelHelpers.classCallCheck(this, ParticipantsGroupsTable);
        return babelHelpers.possibleConstructorReturn(this, (ParticipantsGroupsTable.__proto__ || Object.getPrototypeOf(ParticipantsGroupsTable)).apply(this, arguments));
    }

    babelHelpers.createClass(ParticipantsGroupsTable, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.shouldActualizeRelatedEntities === true) {
                this.props.shouldActualizeRelatedEntitiesCallBack();
                this.actualizeRelatedEntityObjects(this.props.relatedEntity.relatedEntityType, this.props.relatedEntity.relatedEntities);
            }
        }
    }, {
        key: 'actualizeRelatedEntityObjects',
        value: function actualizeRelatedEntityObjects(relatedEntityType, relatedEntities) {
            var index = parseInt(relatedEntityType.replace("participantsGroup", ""));
            var participants = this.props.value[index];
            var invitedParticipantsNames = [];

            for (var i = 0; i < 2; i++) {
                if (participants[i] !== undefined) invitedParticipantsNames.push(participants[i].name);else invitedParticipantsNames.push("");
            }

            relatedEntities.forEach(function (elementName) {
                if (invitedParticipantsNames.indexOf(elementName) === -1) {
                    participants.push({
                        name: elementName,
                        accepted: false
                    });
                }
            });

            invitedParticipantsNames.forEach(function (elementName) {
                if (relatedEntities.indexOf(elementName) === -1) {
                    for (var _i = 0; _i < participants.length; _i++) {
                        if (participants[_i].name === elementName) {
                            participants.splice(_i, 1);
                        }
                    }
                }
            });

            this.props.changeEntity(this.props.fieldName, this.props.value);
        }
    }, {
        key: 'createTableRows',
        value: function createTableRows() {
            var _this2 = this;

            if (this.props.value.length === 0) {
                return _react2.default.createElement(_EmptyTournamentTableRow2.default, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 61
                    }
                });
            } else {
                return this.props.value.map(function (group, index) {
                    return _react2.default.createElement(_PartisipantsGroupTableRow2.default, { key: index,
                        group: group,
                        index: index,
                        invited: _this2.props.value,
                        disabled: _this2.props.disabled,
                        deleteGroup: _this2.deleteGroup.bind(_this2),
                        deleteElement: _this2.deleteElement.bind(_this2),
                        navigate: _this2.props.navigate, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 65
                        }
                    });
                });
            }
        }
    }, {
        key: 'deleteGroup',
        value: function deleteGroup(index) {
            var elements = this.props.value;
            elements.splice(index, 1);
            this.props.changeEntity(this.props.fieldName, elements);
        }
    }, {
        key: 'deleteElement',
        value: function deleteElement(index, name) {
            var elements = this.props.value[index];
            for (var i = 0; i < 2; i++) {
                if (elements[i] !== undefined && elements[i].name === name) if (elements.length === 2) elements.splice(i, 1);else {
                    this.deleteGroup(index);
                    break;
                }
            }
            this.props.changeEntity(this.props.fieldName, this.props.value);
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _reactNative.View,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 100
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 101
                        }
                    },
                    this.props.name
                ),
                this.createTableRows()
            );
        }
    }]);
    return ParticipantsGroupsTable;
}(_react2.default.Component);

exports.default = ParticipantsGroupsTable;