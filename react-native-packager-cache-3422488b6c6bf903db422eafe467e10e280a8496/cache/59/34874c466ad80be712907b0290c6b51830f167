Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/commonComponents/checkBox/Checkbox.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNativeCheckBox = require('react-native-check-box');

var _reactNativeCheckBox2 = babelHelpers.interopRequireDefault(_reactNativeCheckBox);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _index = require('../../../redux/actions/index');

var Checkbox = function (_React$Component) {
    babelHelpers.inherits(Checkbox, _React$Component);

    function Checkbox(props) {
        babelHelpers.classCallCheck(this, Checkbox);

        var _this = babelHelpers.possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, props));

        _this.state = {
            checked: false
        };
        return _this;
    }

    babelHelpers.createClass(Checkbox, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setState({ checked: this.props.checked });
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.checked !== undefined && nextProps.checked !== this.props.checked) {
                this.setState({ checked: nextProps.checked });
            }
        }
    }, {
        key: 'changeRelatedEntities',
        value: function changeRelatedEntities(element, checked) {
            var relatedEntities = this.props.entityPanel.relatedEntity.relatedEntities;

            if (this.props.entityPanel.relatedEntity.relatedEntityType === "participatedTournaments") {
                this.props.checkElement(this.props.element.name, checked);
                this.setState({ checked: checked });
                if (checked) {
                    relatedEntities.push({
                        name: element.name,
                        playersOnTableCount: element.playersOnTableCount
                    });
                } else {
                    relatedEntities = relatedEntities.filter(function (relatedEntity) {
                        return relatedEntity.name !== element.name;
                    });
                }
                this.props.changeRelatedEntities(relatedEntities);
            } else {
                if (!checked || this.props.entityPanel.relatedEntity.relatedEntityLimit >= relatedEntities.length + 1) {
                    this.props.checkElement(this.props.element.name, checked);
                    this.setState({ checked: checked });
                    if (checked) {
                        relatedEntities.push(element.name);
                    } else {
                        var index = relatedEntities.indexOf(element.name);
                        relatedEntities.splice(index, 1);
                    }
                    this.props.changeRelatedEntities(relatedEntities);
                } else {
                    this.props.showFailureMessage("You can choose only " + this.props.entityPanel.relatedEntity.relatedEntityLimit + " elements");
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(_reactNativeCheckBox2.default, {
                style: { padding: 10, width: 55, height: 55, justifyContent: 'center', alignItems: 'center' },
                isChecked: this.state.checked,
                onClick: function onClick() {
                    var checked = _this2.state.checked;
                    checked = !checked;
                    if (_this2.props.entityPanel.mode !== 'disabled') {
                        _this2.changeRelatedEntities(_this2.props.element, checked);
                    } else {
                        _this2.props.checkElement(_this2.props.element.name, checked);
                        _this2.setState({ checked: checked });
                    }
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 65
                }
            });
        }
    }]);
    return Checkbox;
}(_react2.default.Component);

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_index.ActionCreators, dispatch);
}

function mapStateToProps(state) {
    return {
        entityPanel: state.entityPanel,
        page: state.page
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Checkbox);