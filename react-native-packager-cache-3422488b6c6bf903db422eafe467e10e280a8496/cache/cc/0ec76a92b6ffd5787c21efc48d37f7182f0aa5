Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;
var _jsxFileName = '/home/jarek/battleCraftSound/battleCraftMobile/App/components/entityPanel/inputs/DateInput.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNativeModalDatetimePicker = require('react-native-modal-datetime-picker');

var _reactNativeModalDatetimePicker2 = babelHelpers.interopRequireDefault(_reactNativeModalDatetimePicker);

var _reactNative = require('react-native');

var _dateformat = require('dateformat');

var _dateformat2 = babelHelpers.interopRequireDefault(_dateformat);

var _DateInputStyles = require('../../../Styles/UniversalStyles/DateInputStyles');

var _DateInputStyles2 = babelHelpers.interopRequireDefault(_DateInputStyles);

var _EntityPanelInputsStyles = require('../../../Styles/CollectionPanelStyles/EntityPanelInputsStyles');

var _EntityPanelInputsStyles2 = babelHelpers.interopRequireDefault(_EntityPanelInputsStyles);

var DateInput = function (_React$Component) {
    babelHelpers.inherits(DateInput, _React$Component);

    function DateInput(props) {
        babelHelpers.classCallCheck(this, DateInput);

        var _this = babelHelpers.possibleConstructorReturn(this, (DateInput.__proto__ || Object.getPrototypeOf(DateInput)).call(this, props));

        _this.state = {
            isDatePickerVisible: false,
            isTimePickerVisible: false,
            dateValue: "",
            timeValue: ""
        };
        return _this;
    }

    babelHelpers.createClass(DateInput, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setState({ dateValue: (0, _dateformat2.default)(this.props.value, "yyyy-mm-dd") });
            this.setState({ timeValue: (0, _dateformat2.default)(this.props.value, "HH:MM") });
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.value !== undefined && nextProps.value !== this.props.value) {
                this.setState({ dateValue: (0, _dateformat2.default)(nextProps.value, "yyyy-mm-dd") });
                this.setState({ timeValue: (0, _dateformat2.default)(nextProps.value, "HH:MM") });
            }
        }
    }, {
        key: 'onTimeChange',
        value: function onTimeChange(value) {
            this.setState({ isTimePickerVisible: false });
            var dateString = new Date(this.state.dateValue + "T" + (0, _dateformat2.default)(value, "HH:MM"));
            this.props.changeEntity(this.props.fieldName, dateString);
        }
    }, {
        key: 'onDateChange',
        value: function onDateChange(value) {
            this.setState({ isDatePickerVisible: false });
            var dateString = new Date((0, _dateformat2.default)(value, "yyyy-mm-dd") + "T" + this.state.timeValue);
            this.props.changeEntity(this.props.fieldName, dateString);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                _reactNative.View,
                { style: _EntityPanelInputsStyles2.default.inputStyle, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 50
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 51
                        }
                    },
                    this.props.name
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: _DateInputStyles2.default.dateInputMainView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 52
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableHighlight,
                        { style: _DateInputStyles2.default.dateInputButton, onPress: function onPress() {
                                return _this2.setState({ isDatePickerVisible: true });
                            }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 53
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: { fontSize: 15 }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 54
                                }
                            },
                            this.state.dateValue
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.TouchableHighlight,
                        { style: _DateInputStyles2.default.dateInputButton, onPress: function onPress() {
                                return _this2.setState({ isTimePickerVisible: true });
                            }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 56
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: { fontSize: 15 }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 57
                                }
                            },
                            this.state.timeValue
                        )
                    )
                ),
                _react2.default.createElement(_reactNativeModalDatetimePicker2.default, {
                    datePickerModeAndroid: 'spinner',
                    mode: 'date',
                    minimumDate: new Date(),
                    isVisible: this.state.isDatePickerVisible,
                    onConfirm: this.onDateChange.bind(this),
                    onCancel: function onCancel() {
                        return _this2.setState({ isDatePickerVisible: false });
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 60
                    }
                }),
                _react2.default.createElement(_reactNativeModalDatetimePicker2.default, {
                    datePickerModeAndroid: 'spinner',
                    is24Hour: true,
                    mode: 'time',
                    minimumDate: new Date(),
                    isVisible: this.state.isTimePickerVisible,
                    onConfirm: this.onTimeChange.bind(this),
                    onCancel: function onCancel() {
                        return _this2.setState({ isTimePickerVisible: false });
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 68
                    }
                })
            );
        }
    }]);
    return DateInput;
}(_react2.default.Component);

exports.default = DateInput;